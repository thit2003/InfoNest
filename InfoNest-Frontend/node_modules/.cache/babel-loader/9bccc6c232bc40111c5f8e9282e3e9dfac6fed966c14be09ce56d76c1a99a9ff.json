{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thit Lwin Win Thant\\\\Downloads\\\\InfoNest\\\\InfoNest-React-Frontend\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\n// src/pages/HomePage.js\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom'; // For redirection\nimport axios from 'axios'; // For making API calls\nimport '../styles/Home.css'; // Import the CSS file\n\n// Placeholder images - ensure logo.png and avatar.png are in public/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst infonestLogo = '/logo.png';\nconst userAvatar = '/avatar.png';\nconst HomePage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [username, setUsername] = useState('User');\n  // messages state: array of objects { sender: 'user'/'bot', text: '...' }\n  const [messages, setMessages] = useState([]);\n  const [chatInput, setChatInput] = useState('');\n  // sidebarHistory state: array of strings (truncated recent messages)\n  const [sidebarHistory, setSidebarHistory] = useState([]);\n  const API_BASE_URL = 'http://localhost:8000/api';\n\n  // --- Authentication Check and Fetch Initial Data on Mount ---\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedUsername = localStorage.getItem('username');\n    if (!token) {\n      alert('You are not logged in. Please log in first.');\n      navigate('/login');\n      return;\n    }\n    if (storedUsername) {\n      setUsername(storedUsername);\n    }\n\n    // Fetch history when component mounts OR if messages are cleared (e.g. new chat)\n    fetchChatHistory(token);\n  }, [navigate]); // Only re-run if navigate changes\n\n  // --- Function to Fetch Chat History ---\n  const fetchChatHistory = async token => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/history`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 200 && response.data.success) {\n        const historyData = response.data.data;\n        const formattedMessages = [];\n        const newSidebarHistory = [];\n\n        // Process fetched history to display in chat and sidebar\n        historyData.forEach(entry => {\n          formattedMessages.push({\n            sender: 'user',\n            text: entry.userMessage\n          });\n          formattedMessages.push({\n            sender: 'bot',\n            text: entry.botResponse\n          });\n          // Add truncated user message to sidebar history\n          newSidebarHistory.push(entry.userMessage.substring(0, 30) + (entry.userMessage.length > 30 ? '...' : ''));\n        });\n        setMessages(formattedMessages);\n        setSidebarHistory(newSidebarHistory); // Update sidebar state\n\n        // If no history loaded, show a greeting\n        if (formattedMessages.length === 0) {\n          setMessages([{\n            sender: 'bot',\n            text: 'Hello! How can I help you today?'\n          }]);\n        }\n      } else {\n        const errorData = response.data;\n        console.error('Failed to fetch chat history:', errorData.error);\n        alert('Could not load chat history. Please try again.');\n        // If there's an issue fetching history, still show a bot greeting\n        setMessages([{\n          sender: 'bot',\n          text: 'Hello! How can I help you today?'\n        }]);\n      }\n    } catch (error) {\n      console.error('Network error fetching chat history:', error);\n      if (error.response && error.response.status === 401) {\n        alert('Session expired. Please log in again.');\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        navigate('/login');\n      } else {\n        alert('Network error. Could not connect to server for history.');\n        setMessages([{\n          sender: 'bot',\n          text: 'Hello! How can I help you today?'\n        }]); // Fallback greeting\n      }\n    }\n  };\n\n  // --- Function to Send Message to Chatbot ---\n  const sendMessage = async messageText => {\n    const token = localStorage.getItem('token');\n    if (!token || messageText.trim() === '') return; // Don't send empty messages or if no token\n\n    // Add user's message to display immediately\n    const userMessage = {\n      sender: 'user',\n      text: messageText\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setChatInput(''); // Clear input field after sending\n\n    try {\n      const response = await axios.post(`${API_BASE_URL}/chat`, {\n        message: messageText\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 200) {\n        const botResponse = response.data.botResponse;\n        // Add bot's response to display\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: botResponse\n        }]);\n\n        // Add the user's message to the sidebar history (truncated)\n        setSidebarHistory(prevSidebar => {\n          // Prevent adding duplicates or overly similar items if user sends same thing rapidly\n          const truncatedMsg = messageText.substring(0, 30) + (messageText.length > 30 ? '...' : '');\n          if (prevSidebar.length === 0 || prevSidebar[0] !== truncatedMsg) {\n            return [truncatedMsg, ...prevSidebar.slice(0, 4)]; // Add to front, keep limit\n          }\n          return prevSidebar;\n        });\n      } else {\n        const errorData = response.data;\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: `Error: ${errorData.error || 'Failed to get bot response.'}`\n        }]);\n      }\n    } catch (error) {\n      console.error('Network error sending message:', error);\n      let errorMessage = 'Network error. Could not connect to chatbot.';\n      if (error.response) {\n        if (error.response.status === 401) {\n          // Session expired\n          errorMessage = 'Session expired. Please log in again.';\n          localStorage.removeItem('token');\n          localStorage.removeItem('username');\n          navigate('/login');\n        } else if (error.response.data && error.response.data.error) {\n          errorMessage = `Error: ${error.response.data.error}`;\n        }\n      }\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: errorMessage\n      }]);\n    }\n  };\n\n  // --- Event Handlers ---\n  const handleChatInputChange = e => {\n    setChatInput(e.target.value);\n  };\n  const handleSendButtonClick = () => {\n    sendMessage(chatInput);\n  };\n  const handleInputKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage(chatInput);\n    }\n  };\n\n  // --- Handle Clicking on Quick Question Buttons ---\n  const handleQuickQuestionClick = e => {\n    sendMessage(e.target.textContent); // Send the button text as a message\n  };\n\n  // --- Handle Clicking on Recent History Items ---\n  // This is a more advanced feature. For now, it just logs a message.\n  // In a real app, you'd want to load that specific chat conversation.\n  const handleRecentChatItemClick = recentMessage => {\n    console.log(\"Clicked on recent chat item:\", recentMessage);\n    // You would typically fetch a specific conversation ID or restart a chat based on this.\n    // For now, we'll just simulate sending it as a new message for simplicity.\n    sendMessage(recentMessage);\n  };\n\n  // --- Auto-scroll messages to bottom ---\n  useEffect(() => {\n    const messagesContainer = document.querySelector('.chat-messages-container ul'); // Target the ul within the container\n    if (messagesContainer) {\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n  }, [messages]); // Re-run when messages state updates\n\n  // --- Handle \"New chat\" button ---\n  const handleNewChat = () => {\n    setMessages([]); // Clear current chat display\n    setSidebarHistory([]); // Clear sidebar history too\n    // Optionally, you might want to clear chat history from backend via an API call if needed\n    // For now, frontend is enough for a new blank slate.\n    // Show initial bot greeting after clearing\n    setMessages([{\n      sender: 'bot',\n      text: 'Hello! How can I help you today?'\n    }]);\n  };\n\n  // Render JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: infonestLogo,\n          alt: \"InfoNest Logo\",\n          className: \"circle-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"InfoNest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-chat-btn\",\n        onClick: handleNewChat,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          style: {\n            marginRight: '8px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 5V19M19 12H5\",\n            stroke: \"#333\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), \"New chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"recent-title\",\n        children: \"Recent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"recent-list\",\n        children: sidebarHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleRecentChatItemClick(entry) // Make recent items clickable\n          ,\n          style: {\n            cursor: 'pointer',\n            padding: '5px 0',\n            fontSize: '14px',\n            lineHeight: '1.5',\n            color: '#333'\n          },\n          children: entry\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          style: {\n            marginRight: '8px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M19.4286 4.57143C19.4286 4.57143 15.2143 0.571429 12 0.571429C8.78571 0.571429 4.57143 4.57143 4.57143 4.57143M19.4286 4.57143V10.2857C19.4286 10.7857 19.0714 11.1429 18.5714 11.1429H17.2857M19.4286 4.57143V8.57143M4.57143 4.57143V10.2857C4.57143 10.7857 4.92857 11.1429 5.42857 11.1429H6.71429M4.57143 4.57143V8.57143M12 11.1429V23.4286M12 11.1429C10.2857 11.1429 8.57143 11.1429 7.14286 10.2857C5.71429 9.42857 5.71429 7.71429 5.71429 6.28571C5.71429 4.85714 5.71429 3.14286 7.14286 2.28571C8.57143 1.42857 10.2857 1.42857 12 1.42857C13.7143 1.42857 15.4286 1.42857 16.8571 2.28571C18.2857 3.14286 18.2857 4.85714 18.2857 6.28571C18.2857 7.71429 18.2857 9.42857 16.8571 10.2857\",\n            stroke: \"#555\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), \"Settings & Help\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: userAvatar,\n          alt: \"User Avatar\",\n          className: \"avatar-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"greeting\",\n        children: [\"Hello, \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"userNameGreeting\",\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 41\n        }, this), \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-container\",\n        style: {\n          /* Added basic styling here for demo */\n          maxHeight: '400px',\n          overflowY: 'auto',\n          width: '80%',\n          marginBottom: '20px',\n          border: '1px solid #ccc',\n          padding: '10px',\n          borderRadius: '8px',\n          backgroundColor: '#f9f9f9'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"messagesList\",\n          style: {\n            listStyle: 'none',\n            padding: '0',\n            margin: 0\n          },\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              marginBottom: '10px',\n              padding: '8px 12px',\n              borderRadius: '15px',\n              maxWidth: '70%',\n              wordWrap: 'break-word',\n              backgroundColor: msg.sender === 'user' ? '#dcf8c6' : '#e0e0e0',\n              // User: green, Bot: grey\n              marginLeft: msg.sender === 'user' ? 'auto' : '0',\n              // User messages right-aligned\n              marginRight: msg.sender === 'user' ? '0' : 'auto',\n              // Bot messages left-aligned\n              textAlign: msg.sender === 'user' ? 'right' : 'left',\n              display: 'inline-block',\n              // Ensure background fits text\n              paddingLeft: msg.sender === 'user' ? '15px' : '12px',\n              paddingRight: msg.sender === 'user' ? '12px' : '15px'\n            },\n            children: msg.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"quick-question-btn\",\n          onClick: handleQuickQuestionClick,\n          children: \"What is Assumption University?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"quick-question-btn\",\n          onClick: handleQuickQuestionClick,\n          children: \"How can I enroll as an international student?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"quick-question-btn\",\n          onClick: handleQuickQuestionClick,\n          children: \"Give me study plan for bachelor of Computer Science\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ask-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"chatInput\",\n          placeholder: \"Ask InfoNest anything\",\n          value: chatInput,\n          onChange: handleChatInputChange,\n          onKeyPress: handleInputKeyPress,\n          style: {\n            /* Inline styles for simplicity, better in CSS */\n            width: '70%',\n            padding: '12px',\n            borderRadius: '25px',\n            border: '1px solid #aaa',\n            textAlign: 'center',\n            marginRight: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"sendChatBtn\",\n          onClick: handleSendButtonClick,\n          style: {\n            /* Inline styles for simplicity */\n            padding: '12px 15px',\n            borderRadius: '25px',\n            border: 'none',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            cursor: 'pointer'\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"pEWFrdg/5SMr9fDxJKqZ50JSxBE=\", false, function () {\n  return [useNavigate];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","Link","useNavigate","axios","jsxDEV","_jsxDEV","infonestLogo","userAvatar","HomePage","_s","navigate","username","setUsername","messages","setMessages","chatInput","setChatInput","sidebarHistory","setSidebarHistory","API_BASE_URL","token","localStorage","getItem","storedUsername","alert","fetchChatHistory","response","get","headers","Authorization","status","data","success","historyData","formattedMessages","newSidebarHistory","forEach","entry","push","sender","text","userMessage","botResponse","substring","length","errorData","console","error","removeItem","sendMessage","messageText","trim","prevMessages","post","message","prevSidebar","truncatedMsg","slice","errorMessage","handleChatInputChange","e","target","value","handleSendButtonClick","handleInputKeyPress","key","handleQuickQuestionClick","textContent","handleRecentChatItemClick","recentMessage","log","messagesContainer","document","querySelector","scrollTop","scrollHeight","handleNewChat","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","viewBox","fill","xmlns","style","marginRight","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","map","index","cursor","padding","fontSize","lineHeight","color","id","maxHeight","overflowY","marginBottom","border","borderRadius","backgroundColor","listStyle","margin","msg","maxWidth","wordWrap","marginLeft","textAlign","display","paddingLeft","paddingRight","type","placeholder","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/Thit Lwin Win Thant/Downloads/InfoNest/InfoNest-React-Frontend/src/pages/HomePage.js"],"sourcesContent":["// src/pages/HomePage.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom'; // For redirection\r\nimport axios from 'axios'; // For making API calls\r\nimport '../styles/Home.css'; // Import the CSS file\r\n\r\n// Placeholder images - ensure logo.png and avatar.png are in public/\r\nconst infonestLogo = '/logo.png';\r\nconst userAvatar = '/avatar.png';\r\n\r\nconst HomePage = () => {\r\n  const navigate = useNavigate();\r\n  const [username, setUsername] = useState('User');\r\n  // messages state: array of objects { sender: 'user'/'bot', text: '...' }\r\n  const [messages, setMessages] = useState([]);\r\n  const [chatInput, setChatInput] = useState('');\r\n  // sidebarHistory state: array of strings (truncated recent messages)\r\n  const [sidebarHistory, setSidebarHistory] = useState([]);\r\n\r\n  const API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n  // --- Authentication Check and Fetch Initial Data on Mount ---\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const storedUsername = localStorage.getItem('username');\r\n\r\n    if (!token) {\r\n      alert('You are not logged in. Please log in first.');\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    if (storedUsername) {\r\n      setUsername(storedUsername);\r\n    }\r\n\r\n    // Fetch history when component mounts OR if messages are cleared (e.g. new chat)\r\n    fetchChatHistory(token);\r\n\r\n  }, [navigate]); // Only re-run if navigate changes\r\n\r\n  // --- Function to Fetch Chat History ---\r\n  const fetchChatHistory = async (token) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/history`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      if (response.status === 200 && response.data.success) {\r\n        const historyData = response.data.data;\r\n        const formattedMessages = [];\r\n        const newSidebarHistory = [];\r\n\r\n        // Process fetched history to display in chat and sidebar\r\n        historyData.forEach(entry => {\r\n          formattedMessages.push({ sender: 'user', text: entry.userMessage });\r\n          formattedMessages.push({ sender: 'bot', text: entry.botResponse });\r\n          // Add truncated user message to sidebar history\r\n          newSidebarHistory.push(entry.userMessage.substring(0, 30) + (entry.userMessage.length > 30 ? '...' : ''));\r\n        });\r\n\r\n        setMessages(formattedMessages);\r\n        setSidebarHistory(newSidebarHistory); // Update sidebar state\r\n\r\n        // If no history loaded, show a greeting\r\n        if (formattedMessages.length === 0) {\r\n          setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n        }\r\n      } else {\r\n        const errorData = response.data;\r\n        console.error('Failed to fetch chat history:', errorData.error);\r\n        alert('Could not load chat history. Please try again.');\r\n        // If there's an issue fetching history, still show a bot greeting\r\n        setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error fetching chat history:', error);\r\n      if (error.response && error.response.status === 401) {\r\n        alert('Session expired. Please log in again.');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('username');\r\n        navigate('/login');\r\n      } else {\r\n        alert('Network error. Could not connect to server for history.');\r\n        setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]); // Fallback greeting\r\n      }\r\n    }\r\n  };\r\n\r\n  // --- Function to Send Message to Chatbot ---\r\n  const sendMessage = async (messageText) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token || messageText.trim() === '') return; // Don't send empty messages or if no token\r\n\r\n    // Add user's message to display immediately\r\n    const userMessage = { sender: 'user', text: messageText };\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n    setChatInput(''); // Clear input field after sending\r\n\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/chat`,\r\n        { message: messageText },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        const botResponse = response.data.botResponse;\r\n        // Add bot's response to display\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: botResponse }]);\r\n\r\n        // Add the user's message to the sidebar history (truncated)\r\n        setSidebarHistory(prevSidebar => {\r\n            // Prevent adding duplicates or overly similar items if user sends same thing rapidly\r\n            const truncatedMsg = messageText.substring(0, 30) + (messageText.length > 30 ? '...' : '');\r\n            if (prevSidebar.length === 0 || prevSidebar[0] !== truncatedMsg) {\r\n                return [truncatedMsg, ...prevSidebar.slice(0, 4)]; // Add to front, keep limit\r\n            }\r\n            return prevSidebar;\r\n        });\r\n      } else {\r\n        const errorData = response.data;\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Error: ${errorData.error || 'Failed to get bot response.'}` }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error sending message:', error);\r\n      let errorMessage = 'Network error. Could not connect to chatbot.';\r\n      if (error.response) {\r\n        if (error.response.status === 401) { // Session expired\r\n           errorMessage = 'Session expired. Please log in again.';\r\n           localStorage.removeItem('token');\r\n           localStorage.removeItem('username');\r\n           navigate('/login');\r\n        } else if (error.response.data && error.response.data.error) {\r\n           errorMessage = `Error: ${error.response.data.error}`;\r\n        }\r\n      }\r\n      setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: errorMessage }]);\r\n    }\r\n  };\r\n\r\n  // --- Event Handlers ---\r\n  const handleChatInputChange = (e) => {\r\n    setChatInput(e.target.value);\r\n  };\r\n\r\n  const handleSendButtonClick = () => {\r\n    sendMessage(chatInput);\r\n  };\r\n\r\n  const handleInputKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage(chatInput);\r\n    }\r\n  };\r\n\r\n  // --- Handle Clicking on Quick Question Buttons ---\r\n  const handleQuickQuestionClick = (e) => {\r\n    sendMessage(e.target.textContent); // Send the button text as a message\r\n  };\r\n\r\n  // --- Handle Clicking on Recent History Items ---\r\n  // This is a more advanced feature. For now, it just logs a message.\r\n  // In a real app, you'd want to load that specific chat conversation.\r\n  const handleRecentChatItemClick = (recentMessage) => {\r\n      console.log(\"Clicked on recent chat item:\", recentMessage);\r\n      // You would typically fetch a specific conversation ID or restart a chat based on this.\r\n      // For now, we'll just simulate sending it as a new message for simplicity.\r\n      sendMessage(recentMessage);\r\n  };\r\n\r\n\r\n  // --- Auto-scroll messages to bottom ---\r\n  useEffect(() => {\r\n    const messagesContainer = document.querySelector('.chat-messages-container ul'); // Target the ul within the container\r\n    if (messagesContainer) {\r\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n    }\r\n  }, [messages]); // Re-run when messages state updates\r\n\r\n  // --- Handle \"New chat\" button ---\r\n  const handleNewChat = () => {\r\n    setMessages([]); // Clear current chat display\r\n    setSidebarHistory([]); // Clear sidebar history too\r\n    // Optionally, you might want to clear chat history from backend via an API call if needed\r\n    // For now, frontend is enough for a new blank slate.\r\n    // Show initial bot greeting after clearing\r\n    setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n  };\r\n\r\n  // Render JSX\r\n  return (\r\n    <div className=\"container\">\r\n      <aside className=\"sidebar\">\r\n        <div className=\"logo-section\">\r\n          <img src={infonestLogo} alt=\"InfoNest Logo\" className=\"circle-logo\" />\r\n          <h1>InfoNest</h1>\r\n        </div>\r\n\r\n        <button className=\"new-chat-btn\" onClick={handleNewChat}>\r\n          {/* Inline SVG for pencil icon, or use an imported component */}\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px' }}>\r\n            <path d=\"M12 5V19M19 12H5\" stroke=\"#333\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n          New chat\r\n        </button>\r\n\r\n        <p className=\"recent-title\">Recent</p>\r\n        <ul className=\"recent-list\">\r\n          {/* Render recent chat history */}\r\n          {sidebarHistory.map((entry, index) => (\r\n            <li\r\n              key={index}\r\n              onClick={() => handleRecentChatItemClick(entry)} // Make recent items clickable\r\n              style={{ cursor: 'pointer', padding: '5px 0', fontSize: '14px', lineHeight: '1.5', color: '#333' }}\r\n            >\r\n              {entry}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n\r\n        <div className=\"settings-footer\">\r\n          {/* Inline SVG for gear icon */}\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px' }}>\r\n            <path d=\"M19.4286 4.57143C19.4286 4.57143 15.2143 0.571429 12 0.571429C8.78571 0.571429 4.57143 4.57143 4.57143 4.57143M19.4286 4.57143V10.2857C19.4286 10.7857 19.0714 11.1429 18.5714 11.1429H17.2857M19.4286 4.57143V8.57143M4.57143 4.57143V10.2857C4.57143 10.7857 4.92857 11.1429 5.42857 11.1429H6.71429M4.57143 4.57143V8.57143M12 11.1429V23.4286M12 11.1429C10.2857 11.1429 8.57143 11.1429 7.14286 10.2857C5.71429 9.42857 5.71429 7.71429 5.71429 6.28571C5.71429 4.85714 5.71429 3.14286 7.14286 2.28571C8.57143 1.42857 10.2857 1.42857 12 1.42857C13.7143 1.42857 15.4286 1.42857 16.8571 2.28571C18.2857 3.14286 18.2857 4.85714 18.2857 6.28571C18.2857 7.71429 18.2857 9.42857 16.8571 10.2857\" stroke=\"#555\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n          Settings & Help\r\n        </div>\r\n      </aside>\r\n\r\n      <main className=\"main-content\">\r\n        {/* Avatar and Greeting */}\r\n        <div className=\"avatar-container\">\r\n          <img src={userAvatar} alt=\"User Avatar\" className=\"avatar-img\" />\r\n        </div>\r\n        <h1 className=\"greeting\">Hello, <span id=\"userNameGreeting\">{username}</span>!</h1>\r\n\r\n        {/* Chat messages display area */}\r\n        <div className=\"chat-messages-container\" style={{ /* Added basic styling here for demo */\r\n            maxHeight: '400px',\r\n            overflowY: 'auto',\r\n            width: '80%',\r\n            marginBottom: '20px',\r\n            border: '1px solid #ccc',\r\n            padding: '10px',\r\n            borderRadius: '8px',\r\n            backgroundColor: '#f9f9f9'\r\n        }}>\r\n          <ul id=\"messagesList\" style={{ listStyle: 'none', padding: '0', margin: 0 }}>\r\n            {/* Render messages */}\r\n            {messages.map((msg, index) => (\r\n              <li\r\n                key={index}\r\n                style={{\r\n                  marginBottom: '10px',\r\n                  padding: '8px 12px',\r\n                  borderRadius: '15px',\r\n                  maxWidth: '70%',\r\n                  wordWrap: 'break-word',\r\n                  backgroundColor: msg.sender === 'user' ? '#dcf8c6' : '#e0e0e0', // User: green, Bot: grey\r\n                  marginLeft: msg.sender === 'user' ? 'auto' : '0', // User messages right-aligned\r\n                  marginRight: msg.sender === 'user' ? '0' : 'auto', // Bot messages left-aligned\r\n                  textAlign: msg.sender === 'user' ? 'right' : 'left',\r\n                  display: 'inline-block', // Ensure background fits text\r\n                  paddingLeft: msg.sender === 'user' ? '15px' : '12px',\r\n                  paddingRight: msg.sender === 'user' ? '12px' : '15px',\r\n                }}\r\n              >\r\n                {msg.text}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n        {/* Quick question buttons */}\r\n        <div className=\"buttons-row\">\r\n          <button className=\"quick-question-btn\" onClick={handleQuickQuestionClick}>What is Assumption University?</button>\r\n          <button className=\"quick-question-btn\" onClick={handleQuickQuestionClick}>How can I enroll as an international student?</button>\r\n          <button className=\"quick-question-btn\" onClick={handleQuickQuestionClick}>Give me study plan for bachelor of Computer Science</button>\r\n        </div>\r\n\r\n        {/* Input area */}\r\n        <div className=\"ask-container\">\r\n          <input\r\n            type=\"text\"\r\n            id=\"chatInput\"\r\n            placeholder=\"Ask InfoNest anything\"\r\n            value={chatInput}\r\n            onChange={handleChatInputChange}\r\n            onKeyPress={handleInputKeyPress}\r\n            style={{ /* Inline styles for simplicity, better in CSS */\r\n              width: '70%', padding: '12px', borderRadius: '25px', border: '1px solid #aaa',\r\n              textAlign: 'center', marginRight: '10px'\r\n            }}\r\n          />\r\n          <button id=\"sendChatBtn\" onClick={handleSendButtonClick} style={{ /* Inline styles for simplicity */\r\n              padding: '12px 15px', borderRadius: '25px', border: 'none',\r\n              backgroundColor: '#4CAF50', color: 'white', cursor: 'pointer'\r\n          }}>Send</button>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}