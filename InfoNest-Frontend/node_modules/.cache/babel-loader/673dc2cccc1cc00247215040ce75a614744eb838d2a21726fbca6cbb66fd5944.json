{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thit Lwin Win Thant\\\\Downloads\\\\InfoNest\\\\InfoNest-React-Frontend\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\n// src/pages/HomePage.js (modified for conversation management)\n\nimport React, { useState, useEffect, useRef } from 'react'; // Import useRef\nimport { Link, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport '../styles/Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst infonestLogo = '/logo.png';\nconst userAvatar = '/avatar.png';\nconst HomePage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [username, setUsername] = useState('User');\n  const [messages, setMessages] = useState([]);\n  const [chatInput, setChatInput] = useState('');\n  const [sidebarHistory, setSidebarHistory] = useState([]); // Stores { id, snippet }\n  const [currentConversationId, setCurrentConversationId] = useState(null); // State to track current conversation\n\n  const API_BASE_URL = 'http://localhost:8000/api';\n\n  // Use a ref to ensure fetchChatHistory isn't called infinitely if messages.length changes\n  const initialLoadDone = React.useRef(false);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedUsername = localStorage.getItem('username');\n    if (!token) {\n      alert('You are not logged in. Please log in first.');\n      navigate('/login');\n      return;\n    }\n    if (storedUsername) {\n      setUsername(storedUsername);\n    }\n\n    // Fetch conversations when component mounts, but only once\n    if (!initialLoadDone.current) {\n      fetchConversations(token);\n      initialLoadDone.current = true;\n    }\n  }, [navigate]); // Depend on navigate\n\n  // --- Function to Fetch List of Conversations for Sidebar ---\n  const fetchConversations = async token => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/conversations`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 200 && response.data.success) {\n        const conversations = response.data.data;\n        setSidebarHistory(conversations); // Set sidebar history\n        // If there are conversations, load the most recent one by default\n        if (conversations.length > 0) {\n          loadConversation(conversations[0].id, token); // Load the first one\n        } else {\n          // If no conversations, show initial greeting\n          setMessages([{\n            sender: 'bot',\n            text: 'Hello! How can I help you today?'\n          }]);\n        }\n      } else {\n        console.error('Failed to fetch conversations:', response.data.error);\n        alert('Could not load conversation history. Please try again.');\n        setMessages([{\n          sender: 'bot',\n          text: 'Hello! How can I help you today?'\n        }]);\n      }\n    } catch (error) {\n      console.error('Network error fetching conversations:', error);\n      if (error.response && error.response.status === 401) {\n        alert('Session expired. Please log in again.');\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        navigate('/login');\n      } else {\n        alert('Network error. Could not connect to server for conversations.');\n        setMessages([{\n          sender: 'bot',\n          text: 'Hello! How can I help you today?'\n        }]);\n      }\n    }\n  };\n\n  // --- Function to Fetch Messages for a Specific Conversation ---\n  const loadConversation = async (conversationId, token) => {\n    if (!conversationId) return; // Don't do anything if no ID\n    setCurrentConversationId(conversationId); // Set the current conversation\n    try {\n      const response = await axios.get(`${API_BASE_URL}/conversation/${conversationId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 200 && response.data.success) {\n        const fetchedMessages = [];\n        response.data.data.forEach(entry => {\n          if (entry.userMessage) {\n            // User message\n            formattedMessages.push({\n              sender: 'user',\n              text: entry.userMessage\n            });\n          }\n          if (entry.botResponse) {\n            // Bot response\n            formattedMessages.push({\n              sender: 'bot',\n              text: entry.botResponse\n            });\n          }\n        });\n        setMessages(formattedMessages);\n      } else {\n        console.error('Failed to fetch specific conversation:', response.data.error);\n        alert('Could not load this conversation history.');\n      }\n    } catch (error) {\n      console.error('Network error fetching conversation:', error);\n      alert('Network error. Could not load conversation.');\n    }\n  };\n\n  // --- Function to Send Message to Chatbot ---\n  const sendMessage = async messageText => {\n    const token = localStorage.getItem('token');\n    if (!token || messageText.trim() === '' || !currentConversationId) return; // Require token and conversation ID\n\n    const userMessage = {\n      sender: 'user',\n      text: messageText\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setChatInput(''); // Clear input field\n\n    try {\n      const response = await axios.post(`${API_BASE_URL}/chat/send`,\n      // Use the new /send endpoint\n      {\n        message: messageText,\n        conversationId: currentConversationId\n      },\n      // Send message and conversation ID\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 200) {\n        const botResponse = response.data.botResponse;\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: botResponse\n        }]);\n        // Update sidebar history with the latest user message\n        setSidebarHistory(prevSidebar => {\n          const truncatedMsg = messageText.substring(0, 30) + (messageText.length > 30 ? '...' : '');\n          // Add to the beginning if it's a new message, avoid duplicates\n          if (prevSidebar.length === 0 || prevSidebar[0] !== truncatedMsg) {\n            return [truncatedMsg, ...prevSidebar.slice(0, 4)]; // Add to front, keep limit\n          }\n          return prevSidebar;\n        });\n      } else {\n        const errorData = response.data;\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: `Error: ${errorData.error || 'Failed to get bot response.'}`\n        }]);\n      }\n    } catch (error) {\n      console.error('Network error sending message:', error);\n      let errorMessage = 'Network error. Could not connect to chatbot.';\n      if (error.response) {\n        if (error.response.status === 401) {\n          // Session expired\n          errorMessage = 'Session expired. Please log in again.';\n          localStorage.removeItem('token');\n          localStorage.removeItem('username');\n          navigate('/login');\n        } else if (error.response.data && error.response.data.error) {\n          errorMessage = `Error: ${error.response.data.error}`;\n        }\n      }\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: errorMessage\n      }]);\n    }\n  };\n\n  // --- Handle \"New chat\" button ---\n  const handleNewChat = async () => {\n    setMessages([]); // Clear current chat display\n    setSidebarHistory([]); // Clear sidebar history\n\n    // Call backend to start a new conversation\n    const token = localStorage.getItem('token');\n    if (!token) return; // Should not happen if auth is working\n\n    try {\n      const response = await axios.post(`${API_BASE_URL}/chat/new`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        setCurrentConversationId(response.data.conversationId);\n        setMessages([{\n          sender: 'bot',\n          text: response.data.initialMessage || 'Starting a new chat...'\n        }]);\n        // Sidebar history will be updated when conversations are fetched again,\n        // or you could manually add a placeholder if needed.\n      } else {\n        alert('Failed to start new chat. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error starting new chat:', error);\n      alert('Network error starting new chat.');\n    }\n  };\n  const fetchChatHistory = async token => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/history`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 200 && response.data.success) {\n        const historyData = response.data.data;\n        // --- DECLARE VARIABLES HERE ---\n        const formattedMessages = [];\n        const newSidebarHistory = [];\n        // --- END DECLARATION ---\n\n        historyData.forEach(entry => {\n          if (entry.userMessage) {\n            formattedMessages.push({\n              sender: 'user',\n              text: entry.userMessage\n            });\n          }\n          if (entry.botResponse) {\n            formattedMessages.push({\n              sender: 'bot',\n              text: entry.botResponse\n            });\n          }\n          // Add snippet to sidebar history\n          if (entry.userMessage) {\n            // Add user message as snippet\n            newSidebarHistory.push(entry.userMessage.substring(0, 30) + (entry.userMessage.length > 30 ? '...' : ''));\n          } else if (entry.botResponse) {\n            // If no user message, maybe use bot response as snippet\n            newSidebarHistory.push(entry.botResponse.substring(0, 30) + (entry.botResponse.length > 30 ? '...' : ''));\n          }\n        });\n        setMessages(formattedMessages);\n        setSidebarHistory(newSidebarHistory); // Update sidebar state\n\n        // If no history, start with a greeting from the bot\n        if (formattedMessages.length === 0) {\n          setMessages([{\n            sender: 'bot',\n            text: 'Hello! How can I help you today?'\n          }]);\n        }\n      } else {\n        console.error('Failed to fetch chat history:', response.data.error);\n        alert('Could not load chat history. Please try again.');\n        setMessages([{\n          sender: 'bot',\n          text: 'Hello! How can I help you today?'\n        }]);\n      }\n    } catch (error) {\n      console.error('Network error fetching chat history:', error);\n      if (error.response && error.response.status === 401) {\n        alert('Session expired. Please log in again.');\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        navigate('/login');\n      } else {\n        alert('Network error. Could not connect to server for history.');\n        setMessages([{\n          sender: 'bot',\n          text: 'Hello! How can I help you today?'\n        }]);\n      }\n    }\n  };\n  // --- Event Handlers for Input and Buttons ---\n  const handleChatInputChange = e => {\n    setChatInput(e.target.value);\n  };\n  const handleSendButtonClick = () => {\n    sendMessage(chatInput);\n  };\n  const handleInputKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage(chatInput);\n    }\n  };\n\n  // --- Handle Clicking on Recent History Items ---\n  const handleRecentChatItemClick = conversationId => {\n    const token = localStorage.getItem('token');\n    if (!token) return; // Should not happen if auth is working\n\n    console.log(\"Clicked on recent chat item with ID:\", conversationId);\n    loadConversation(conversationId, token); // Load this conversation\n  };\n\n  // --- Auto-scroll messages to bottom ---\n  useEffect(() => {\n    const messagesContainer = document.querySelector('.chat-messages-container ul');\n    if (messagesContainer) {\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n  }, [messages]); // Re-run when messages state updates\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: infonestLogo,\n          alt: \"InfoNest Logo\",\n          className: \"circle-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"InfoNest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-chat-btn\",\n        onClick: handleNewChat,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          style: {\n            marginRight: '8px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 5V19M19 12H5\",\n            stroke: \"#333\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), \"New chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"recent-title\",\n        children: \"Recent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"recent-list\",\n        children: sidebarHistory.map(conv =>\n        /*#__PURE__*/\n        // Use conv object, not just entry\n        _jsxDEV(\"li\", {\n          // Use conversation ID as key\n          onClick: () => handleRecentChatItemClick(conv.id) // Pass conversation ID\n          ,\n          style: {\n            cursor: 'pointer',\n            padding: '5px 0',\n            fontSize: '14px',\n            lineHeight: '1.5',\n            color: '#333',\n            fontWeight: currentConversationId === conv.id ? 'bold' : 'normal' // Highlight active chat\n          },\n          children: conv.snippet\n        }, conv.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          style: {\n            marginRight: '8px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M19.4286 4.57143C19.4286 4.57143 15.2143 0.571429 12 0.571429C8.78571 0.571429 4.57143 4.57143 4.57143 4.57143M19.4286 4.57143V10.2857C19.4286 10.7857 19.0714 11.1429 18.5714 11.1429H17.2857M19.4286 4.57143V8.57143M4.57143 4.57143V10.2857C4.57143 10.7857 4.92857 11.1429 5.42857 11.1429H6.71429M4.57143 4.57143V8.57143M12 11.1429V23.4286M12 11.1429C10.2857 11.1429 8.57143 11.1429 7.14286 10.2857C5.71429 9.42857 5.71429 7.71429 5.71429 6.28571C5.71429 4.85714 5.71429 3.14286 7.14286 2.28571C8.57143 1.42857 10.2857 1.42857 12 1.42857C13.7143 1.42857 15.4286 1.42857 16.8571 2.28571C18.2857 3.14286 18.2857 4.85714 18.2857 6.28571C18.2857 7.71429 18.2857 9.42857 16.8571 10.2857\",\n            stroke: \"#555\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), \"Settings & Help\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: userAvatar,\n          alt: \"User Avatar\",\n          className: \"avatar-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"greeting\",\n        children: [\"Hello, \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"userNameGreeting\",\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 37\n        }, this), \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"messagesList\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: msg.sender === 'user' ? 'user-message' : 'bot-message',\n            children: msg.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ask-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"chatInput\",\n          placeholder: \"Ask InfoNest anything\",\n          value: chatInput,\n          onChange: handleChatInputChange,\n          onKeyPress: handleInputKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"sendChatBtn\",\n          onClick: handleSendButtonClick,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"no2PGJ9dsLQ2TV72C4BG6LNnan4=\", false, function () {\n  return [useNavigate];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","useNavigate","axios","jsxDEV","_jsxDEV","infonestLogo","userAvatar","HomePage","_s","navigate","username","setUsername","messages","setMessages","chatInput","setChatInput","sidebarHistory","setSidebarHistory","currentConversationId","setCurrentConversationId","API_BASE_URL","initialLoadDone","token","localStorage","getItem","storedUsername","alert","current","fetchConversations","response","get","headers","Authorization","status","data","success","conversations","length","loadConversation","id","sender","text","console","error","removeItem","conversationId","fetchedMessages","forEach","entry","userMessage","formattedMessages","push","botResponse","sendMessage","messageText","trim","prevMessages","post","message","prevSidebar","truncatedMsg","substring","slice","errorData","errorMessage","handleNewChat","initialMessage","fetchChatHistory","historyData","newSidebarHistory","handleChatInputChange","e","target","value","handleSendButtonClick","handleInputKeyPress","key","handleRecentChatItemClick","log","messagesContainer","document","querySelector","scrollTop","scrollHeight","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","viewBox","fill","xmlns","style","marginRight","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","map","conv","cursor","padding","fontSize","lineHeight","color","fontWeight","snippet","msg","index","type","placeholder","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/Thit Lwin Win Thant/Downloads/InfoNest/InfoNest-React-Frontend/src/pages/HomePage.js"],"sourcesContent":["// src/pages/HomePage.js (modified for conversation management)\r\n\r\nimport React, { useState, useEffect, useRef } from 'react'; // Import useRef\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport '../styles/Home.css';\r\n\r\nconst infonestLogo = '/logo.png';\r\nconst userAvatar = '/avatar.png';\r\n\r\nconst HomePage = () => {\r\n  const navigate = useNavigate();\r\n  const [username, setUsername] = useState('User');\r\n  const [messages, setMessages] = useState([]);\r\n  const [chatInput, setChatInput] = useState('');\r\n  const [sidebarHistory, setSidebarHistory] = useState([]); // Stores { id, snippet }\r\n  const [currentConversationId, setCurrentConversationId] = useState(null); // State to track current conversation\r\n\r\n  const API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n  // Use a ref to ensure fetchChatHistory isn't called infinitely if messages.length changes\r\n  const initialLoadDone = React.useRef(false);\r\n\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const storedUsername = localStorage.getItem('username');\r\n\r\n    if (!token) {\r\n      alert('You are not logged in. Please log in first.');\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    if (storedUsername) {\r\n      setUsername(storedUsername);\r\n    }\r\n\r\n    // Fetch conversations when component mounts, but only once\r\n    if (!initialLoadDone.current) {\r\n        fetchConversations(token);\r\n        initialLoadDone.current = true;\r\n    }\r\n  }, [navigate]); // Depend on navigate\r\n\r\n  // --- Function to Fetch List of Conversations for Sidebar ---\r\n  const fetchConversations = async (token) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/conversations`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      if (response.status === 200 && response.data.success) {\r\n        const conversations = response.data.data;\r\n        setSidebarHistory(conversations); // Set sidebar history\r\n        // If there are conversations, load the most recent one by default\r\n        if (conversations.length > 0) {\r\n          loadConversation(conversations[0].id, token); // Load the first one\r\n        } else {\r\n          // If no conversations, show initial greeting\r\n          setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n        }\r\n      } else {\r\n        console.error('Failed to fetch conversations:', response.data.error);\r\n        alert('Could not load conversation history. Please try again.');\r\n        setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error fetching conversations:', error);\r\n      if (error.response && error.response.status === 401) {\r\n        alert('Session expired. Please log in again.');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('username');\r\n        navigate('/login');\r\n      } else {\r\n        alert('Network error. Could not connect to server for conversations.');\r\n        setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // --- Function to Fetch Messages for a Specific Conversation ---\r\n  const loadConversation = async (conversationId, token) => {\r\n    if (!conversationId) return; // Don't do anything if no ID\r\n    setCurrentConversationId(conversationId); // Set the current conversation\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/conversation/${conversationId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      if (response.status === 200 && response.data.success) {\r\n        const fetchedMessages = [];\r\n        response.data.data.forEach(entry => {\r\n          if (entry.userMessage) { // User message\r\n            formattedMessages.push({ sender: 'user', text: entry.userMessage });\r\n          }\r\n          if (entry.botResponse) { // Bot response\r\n            formattedMessages.push({ sender: 'bot', text: entry.botResponse });\r\n          }\r\n        });\r\n        setMessages(formattedMessages);\r\n      } else {\r\n        console.error('Failed to fetch specific conversation:', response.data.error);\r\n        alert('Could not load this conversation history.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error fetching conversation:', error);\r\n      alert('Network error. Could not load conversation.');\r\n    }\r\n  };\r\n\r\n  // --- Function to Send Message to Chatbot ---\r\n  const sendMessage = async (messageText) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token || messageText.trim() === '' || !currentConversationId) return; // Require token and conversation ID\r\n\r\n    const userMessage = { sender: 'user', text: messageText };\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n    setChatInput(''); // Clear input field\r\n\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/chat/send`, // Use the new /send endpoint\r\n        { message: messageText, conversationId: currentConversationId }, // Send message and conversation ID\r\n        { headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        const botResponse = response.data.botResponse;\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: botResponse }]);\r\n        // Update sidebar history with the latest user message\r\n        setSidebarHistory(prevSidebar => {\r\n          const truncatedMsg = messageText.substring(0, 30) + (messageText.length > 30 ? '...' : '');\r\n          // Add to the beginning if it's a new message, avoid duplicates\r\n          if (prevSidebar.length === 0 || prevSidebar[0] !== truncatedMsg) {\r\n            return [truncatedMsg, ...prevSidebar.slice(0, 4)]; // Add to front, keep limit\r\n          }\r\n          return prevSidebar;\r\n        });\r\n      } else {\r\n        const errorData = response.data;\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Error: ${errorData.error || 'Failed to get bot response.'}` }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error sending message:', error);\r\n      let errorMessage = 'Network error. Could not connect to chatbot.';\r\n      if (error.response) {\r\n        if (error.response.status === 401) { // Session expired\r\n           errorMessage = 'Session expired. Please log in again.';\r\n           localStorage.removeItem('token');\r\n           localStorage.removeItem('username');\r\n           navigate('/login');\r\n        } else if (error.response.data && error.response.data.error) {\r\n           errorMessage = `Error: ${error.response.data.error}`;\r\n        }\r\n      }\r\n      setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: errorMessage }]);\r\n    }\r\n  };\r\n\r\n  // --- Handle \"New chat\" button ---\r\n  const handleNewChat = async () => {\r\n    setMessages([]); // Clear current chat display\r\n    setSidebarHistory([]); // Clear sidebar history\r\n\r\n    // Call backend to start a new conversation\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return; // Should not happen if auth is working\r\n\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/chat/new`, {}, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n\r\n      if (response.status === 201) {\r\n        setCurrentConversationId(response.data.conversationId);\r\n        setMessages([{ sender: 'bot', text: response.data.initialMessage || 'Starting a new chat...' }]);\r\n        // Sidebar history will be updated when conversations are fetched again,\r\n        // or you could manually add a placeholder if needed.\r\n      } else {\r\n        alert('Failed to start new chat. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error starting new chat:', error);\r\n      alert('Network error starting new chat.');\r\n    }\r\n  };\r\n\r\n  const fetchChatHistory = async (token) => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/history`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n\r\n    if (response.status === 200 && response.data.success) {\r\n      const historyData = response.data.data;\r\n      // --- DECLARE VARIABLES HERE ---\r\n      const formattedMessages = [];\r\n      const newSidebarHistory = [];\r\n      // --- END DECLARATION ---\r\n\r\n      historyData.forEach(entry => {\r\n        if (entry.userMessage) {\r\n          formattedMessages.push({ sender: 'user', text: entry.userMessage });\r\n        }\r\n        if (entry.botResponse) {\r\n          formattedMessages.push({ sender: 'bot', text: entry.botResponse });\r\n        }\r\n        // Add snippet to sidebar history\r\n        if (entry.userMessage) { // Add user message as snippet\r\n          newSidebarHistory.push(entry.userMessage.substring(0, 30) + (entry.userMessage.length > 30 ? '...' : ''));\r\n        } else if (entry.botResponse) { // If no user message, maybe use bot response as snippet\r\n          newSidebarHistory.push(entry.botResponse.substring(0, 30) + (entry.botResponse.length > 30 ? '...' : ''));\r\n        }\r\n      });\r\n\r\n      setMessages(formattedMessages);\r\n      setSidebarHistory(newSidebarHistory); // Update sidebar state\r\n\r\n      // If no history, start with a greeting from the bot\r\n      if (formattedMessages.length === 0) {\r\n        setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n      }\r\n    } else {\r\n      console.error('Failed to fetch chat history:', response.data.error);\r\n      alert('Could not load chat history. Please try again.');\r\n      setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n    }\r\n  } catch (error) {\r\n    console.error('Network error fetching chat history:', error);\r\n    if (error.response && error.response.status === 401) {\r\n      alert('Session expired. Please log in again.');\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('username');\r\n      navigate('/login');\r\n    } else {\r\n      alert('Network error. Could not connect to server for history.');\r\n      setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n    }\r\n  }\r\n};\r\n  // --- Event Handlers for Input and Buttons ---\r\n  const handleChatInputChange = (e) => {\r\n    setChatInput(e.target.value);\r\n  };\r\n\r\n  const handleSendButtonClick = () => {\r\n    sendMessage(chatInput);\r\n  };\r\n\r\n  const handleInputKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage(chatInput);\r\n    }\r\n  };\r\n\r\n  // --- Handle Clicking on Recent History Items ---\r\n  const handleRecentChatItemClick = (conversationId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return; // Should not happen if auth is working\r\n\r\n    console.log(\"Clicked on recent chat item with ID:\", conversationId);\r\n    loadConversation(conversationId, token); // Load this conversation\r\n  };\r\n\r\n  // --- Auto-scroll messages to bottom ---\r\n  useEffect(() => {\r\n    const messagesContainer = document.querySelector('.chat-messages-container ul');\r\n    if (messagesContainer) {\r\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n    }\r\n  }, [messages]); // Re-run when messages state updates\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <aside className=\"sidebar\">\r\n        <div className=\"logo-section\">\r\n          <img src={infonestLogo} alt=\"InfoNest Logo\" className=\"circle-logo\" />\r\n          <h1>InfoNest</h1>\r\n        </div>\r\n\r\n        <button className=\"new-chat-btn\" onClick={handleNewChat}>\r\n          {/* SVG for New Chat Icon */}\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px' }}>\r\n            <path d=\"M12 5V19M19 12H5\" stroke=\"#333\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n          New chat\r\n        </button>\r\n\r\n        <p className=\"recent-title\">Recent</p>\r\n        <ul className=\"recent-list\">\r\n          {/* Render recent conversations (using conversation ID and snippet) */}\r\n          {sidebarHistory.map((conv) => ( // Use conv object, not just entry\r\n            <li\r\n              key={conv.id} // Use conversation ID as key\r\n              onClick={() => handleRecentChatItemClick(conv.id)} // Pass conversation ID\r\n              style={{\r\n                cursor: 'pointer', padding: '5px 0', fontSize: '14px', lineHeight: '1.5', color: '#333',\r\n                fontWeight: currentConversationId === conv.id ? 'bold' : 'normal' // Highlight active chat\r\n              }}\r\n            >\r\n              {conv.snippet}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n\r\n        <div className=\"settings-footer\">\r\n          {/* SVG for Settings Icon */}\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px' }}>\r\n            <path d=\"M19.4286 4.57143C19.4286 4.57143 15.2143 0.571429 12 0.571429C8.78571 0.571429 4.57143 4.57143 4.57143 4.57143M19.4286 4.57143V10.2857C19.4286 10.7857 19.0714 11.1429 18.5714 11.1429H17.2857M19.4286 4.57143V8.57143M4.57143 4.57143V10.2857C4.57143 10.7857 4.92857 11.1429 5.42857 11.1429H6.71429M4.57143 4.57143V8.57143M12 11.1429V23.4286M12 11.1429C10.2857 11.1429 8.57143 11.1429 7.14286 10.2857C5.71429 9.42857 5.71429 7.71429 5.71429 6.28571C5.71429 4.85714 5.71429 3.14286 7.14286 2.28571C8.57143 1.42857 10.2857 1.42857 12 1.42857C13.7143 1.42857 15.4286 1.42857 16.8571 2.28571C18.2857 3.14286 18.2857 4.85714 18.2857 6.28571C18.2857 7.71429 18.2857 9.42857 16.8571 10.2857\" stroke=\"#555\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n      </svg>\r\n      Settings & Help\r\n    </div>\r\n  </aside>\r\n\r\n  <main className=\"main-content\">\r\n    {/* Greeting */}\r\n    <div className=\"avatar-container\">\r\n      <img src={userAvatar} alt=\"User Avatar\" className=\"avatar-img\" />\r\n    </div>\r\n    <h1 className=\"greeting\">Hello, <span id=\"userNameGreeting\">{username}</span>!</h1>\r\n\r\n    {/* Chat messages display area */}\r\n    <div className=\"chat-messages-container\">\r\n      <ul id=\"messagesList\">\r\n        {messages.map((msg, index) => (\r\n          <li\r\n            key={index}\r\n            className={msg.sender === 'user' ? 'user-message' : 'bot-message'}\r\n          >\r\n            {msg.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n\r\n    {/* Input area */}\r\n    <div className=\"ask-container\">\r\n      <input\r\n        type=\"text\"\r\n        id=\"chatInput\"\r\n        placeholder=\"Ask InfoNest anything\"\r\n        value={chatInput}\r\n        onChange={handleChatInputChange}\r\n        onKeyPress={handleInputKeyPress}\r\n      />\r\n      <button id=\"sendChatBtn\" onClick={handleSendButtonClick}>Send</button>\r\n    </div>\r\n  </main>\r\n</div>); };\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}