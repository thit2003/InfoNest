{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thit Lwin Win Thant\\\\Downloads\\\\InfoNest\\\\InfoNest-React-Frontend\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\n// src/pages/HomePage.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // For redirection\nimport axios from 'axios'; // For making API calls\nimport '../styles/Home.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [chats, setChats] = useState([]); // Stores multiple chat sessions [{ id: 1, title: 'Chat 1', messages: [...] }]\nconst [currentChatId, setCurrentChatId] = useState(null); // Tracks which chat is currently displayed\nconst [messages, setMessages] = useState([]); // Messages for the current chat\n\n// Placeholder images\nconst infonestLogo = '/logo.png'; // Assuming logo.png is in public/\nconst userAvatar = '/avatar.png'; // Assuming avatar.png is in public/\n\nconst HomePage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [username, setUsername] = useState('User');\n  // const [messages, setMessages] = useState([]); // Removed global messages state\n  const [chatInput, setChatInput] = useState('');\n  const [sidebarHistory, setSidebarHistory] = useState([]); // This will now store titles of chats\n\n  // --- New state for managing multiple chats ---\n  const [chats, setChats] = useState([]); // Array to hold all chat sessions\n  const [currentChatId, setCurrentChatId] = useState(null); // ID of the chat currently being displayed\n\n  const API_BASE_URL = 'http://localhost:8000/api';\n\n  // --- useEffect to load chats on mount ---\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedUsername = localStorage.getItem('username');\n    if (!token) {\n      alert('You are not logged in. Please log in first.');\n      navigate('/login');\n      return;\n    }\n    if (storedUsername) {\n      setUsername(storedUsername);\n    }\n\n    // Fetch all chat histories or create a default new chat\n    loadInitialChats(token);\n  }, [navigate]);\n\n  // --- Function to load initial chats ---\n  const loadInitialChats = async token => {\n    // Ideally, your backend would return a list of chats.\n    // For now, let's simulate fetching a default new chat.\n    // If you have a /chats endpoint, call it here.\n    // For demonstration, we'll create a default new chat.\n    handleNewChat(); // Start with a blank new chat\n  };\n\n  // --- Function to get messages for the current chat ---\n  const getCurrentChatMessages = () => {\n    const currentChat = chats.find(chat => chat.id === currentChatId);\n    return currentChat ? currentChat.messages : [];\n  };\n\n  // --- Function to update messages for the current chat ---\n  const updateCurrentChatMessages = newMessages => {\n    setChats(prevChats => prevChats.map(chat => chat.id === currentChatId ? {\n      ...chat,\n      messages: newMessages\n    } : chat));\n  };\n\n  // --- Function to fetch chat history (now specific to an ID) ---\n  // This would ideally call your backend to get a specific chat's messages\n  const fetchChatHistory = async chatId => {\n    const token = localStorage.getItem('token');\n    try {\n      // Assuming you have an endpoint like /api/chat/{chatId}\n      const response = await axios.get(`${API_BASE_URL}/chat/${chatId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 200) {\n        const fetchedMessages = response.data.data.messages; // Assuming backend returns messages\n        setMessages(fetchedMessages); // Update the messages for the currently displayed chat\n        // Update sidebar history from fetched chat titles\n        setSidebarHistory(chats.map(chat => ({\n          id: chat.id,\n          title: chat.title\n        })));\n      } else {\n        console.error('Failed to fetch chat history:', response.data.error);\n        alert('Could not load chat history.');\n      }\n    } catch (error) {\n      console.error('Network error fetching chat history:', error);\n      if (error.response && error.response.status === 401) {\n        alert('Session expired. Please log in again.');\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        navigate('/login');\n      } else {\n        alert('Network error. Could not connect to server for history.');\n      }\n    }\n  };\n\n  // --- Function to send message and update current chat ---\n  const sendMessage = async messageText => {\n    const token = localStorage.getItem('token');\n    if (!token || messageText.trim() === '' || !currentChatId) return;\n    const userMessage = {\n      sender: 'user',\n      text: messageText\n    };\n    const currentMessages = getCurrentChatMessages();\n    updateCurrentChatMessages([...currentMessages, userMessage]); // Optimistic update\n\n    setChatInput('');\n    try {\n      // Assuming your chat endpoint can work with a chatId\n      const response = await axios.post(`${API_BASE_URL}/chat/${currentChatId}`, {\n        message: messageText\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 200) {\n        const botResponse = response.data.botResponse;\n        const newMessages = [...currentMessages, userMessage, {\n          sender: 'bot',\n          text: botResponse\n        }];\n        updateCurrentChatMessages(newMessages);\n\n        // Update sidebar with title if it's a new message that creates a title\n        // This part is tricky without a backend providing titles.\n        // For now, we'll rely on the 'New Chat' title.\n      } else {\n        const errorData = response.data;\n        const errorMsg = {\n          sender: 'bot',\n          text: `Error: ${errorData.error || 'Failed to get bot response.'}`\n        };\n        updateCurrentChatMessages([...currentMessages, userMessage, errorMsg]);\n      }\n    } catch (error) {\n      console.error('Network error sending message:', error);\n      let errorMessage = 'Network error. Could not connect to chatbot.';\n      if (error.response && error.response.status === 401) {\n        errorMessage = 'Session expired. Please log in again.';\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        navigate('/login');\n      } else if (error.response && error.response.data && error.response.data.error) {\n        errorMessage = `Error: ${error.response.data.error}`;\n      }\n      updateCurrentChatMessages([...currentMessages, userMessage, {\n        sender: 'bot',\n        text: errorMessage\n      }]);\n    }\n  };\n\n  // --- Function to handle starting a new chat ---\n  const handleNewChat = () => {\n    const newChatId = Date.now(); // Simple unique ID\n    const newChat = {\n      id: newChatId,\n      title: `New Chat ${chats.length + 1}`,\n      // Placeholder title\n      messages: [{\n        sender: 'bot',\n        text: 'Hello! How can I help you today?'\n      }]\n    };\n    setChats([...chats, newChat]);\n    setCurrentChatId(newChatId);\n    setMessages(newChat.messages); // Set current messages\n    setSidebarHistory([...sidebarHistory, {\n      id: newChatId,\n      title: newChat.title\n    }]); // Update sidebar history\n    setChatInput(''); // Clear input\n  };\n\n  // --- Function to handle clicking a recent chat ---\n  const handleRecentChatClick = chatId => {\n    // Find the chat in the chats array\n    const clickedChat = chats.find(chat => chat.id === chatId);\n    if (clickedChat) {\n      setCurrentChatId(chatId);\n      setMessages(clickedChat.messages); // Load messages for that chat\n      setChatInput(''); // Clear input\n    }\n  };\n\n  // ... rest of the functions (handleChatInputChange, etc.) ...\n\n  const handleChatInputChange = e => {\n    setChatInput(e.target.value);\n  };\n  const handleSendButtonClick = () => {\n    sendMessage(chatInput);\n  };\n  const handleInputKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage(chatInput);\n    }\n  };\n  const handleQuickQuestionClick = e => {\n    sendMessage(e.target.textContent);\n  };\n\n  // Auto-scroll messages to bottom\n  useEffect(() => {\n    const messagesContainer = document.querySelector('.chat-messages-container');\n    if (messagesContainer) {\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n  }, [messages]); // Scroll whenever messages state updates\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: infonestLogo,\n          alt: \"InfoNest Logo\",\n          className: \"circle-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"InfoNest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-chat-btn\",\n        onClick: handleNewChat,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 5V19M19 12H5\",\n            stroke: \"#333\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), \"New chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"recent-title\",\n        children: \"Recent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"recent-list\",\n        children: sidebarHistory.map(chatInfo => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleRecentChatClick(chatInfo.id)\n          // Optionally highlight the currently active chat\n          ,\n          style: {\n            fontWeight: currentChatId === chatInfo.id ? 'bold' : 'normal',\n            backgroundColor: currentChatId === chatInfo.id ? '#e0e0e0' : 'transparent'\n          },\n          children: chatInfo.title\n        }, chatInfo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M19.4286 4.57143C19.4286 4.57143 15.2143 0.571429 12 0.571429C8.78571 0.571429 4.57143 4.57143 4.57143 4.57143M19.4286 4.57143V10.2857C19.4286 10.7857 19.0714 11.1429 18.5714 11.1429H17.2857M19.4286 4.57143V8.57143M4.57143 4.57143V10.2857C4.57143 10.7857 4.92857 11.1429 5.42857 11.1429H6.71429M4.57143 4.57143V8.57143M12 11.1429V23.4286M12 11.1429C10.2857 11.1429 8.57143 11.1429 7.14286 10.2857C5.71429 9.42857 5.71429 7.71429 5.71429 6.28571C5.71429 4.85714 5.71429 3.14286 7.14286 2.28571C8.57143 1.42857 10.2857 1.42857 12 1.42857C13.7143 1.42857 15.4286 1.42857 16.8571 2.28571C18.2857 3.14286 18.2857 4.85714 18.2857 6.28571C18.2857 7.71429 18.2857 9.42857 16.8571 10.2857\",\n            stroke: \"#555\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), \"Settings & Help\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            // Using index here, but unique IDs per message would be better\n            className: msg.sender === 'user' ? 'user-message' : 'bot-message',\n            children: msg.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ask-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"chatInput\",\n          placeholder: \"Ask InfoNest anything\",\n          value: chatInput,\n          onChange: handleChatInputChange,\n          onKeyPress: handleInputKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"sendChatBtn\",\n          onClick: handleSendButtonClick,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"qi5lx0QQ3hJZfrl2yBj88QJm27c=\", false, function () {\n  return [useNavigate];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","chats","setChats","currentChatId","setCurrentChatId","messages","setMessages","infonestLogo","userAvatar","HomePage","_s","navigate","username","setUsername","chatInput","setChatInput","sidebarHistory","setSidebarHistory","API_BASE_URL","token","localStorage","getItem","storedUsername","alert","loadInitialChats","handleNewChat","getCurrentChatMessages","currentChat","find","chat","id","updateCurrentChatMessages","newMessages","prevChats","map","fetchChatHistory","chatId","response","get","headers","Authorization","status","fetchedMessages","data","title","console","error","removeItem","sendMessage","messageText","trim","userMessage","sender","text","currentMessages","post","message","botResponse","errorData","errorMsg","errorMessage","newChatId","Date","now","newChat","length","handleRecentChatClick","clickedChat","handleChatInputChange","e","target","value","handleSendButtonClick","handleInputKeyPress","key","handleQuickQuestionClick","textContent","messagesContainer","document","querySelector","scrollTop","scrollHeight","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","chatInfo","style","fontWeight","backgroundColor","msg","index","type","placeholder","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/Thit Lwin Win Thant/Downloads/InfoNest/InfoNest-React-Frontend/src/pages/HomePage.js"],"sourcesContent":["// src/pages/HomePage.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // For redirection\r\nimport axios from 'axios'; // For making API calls\r\nimport '../styles/Home.css'; // Import the CSS file\r\nconst [chats, setChats] = useState([]); // Stores multiple chat sessions [{ id: 1, title: 'Chat 1', messages: [...] }]\r\nconst [currentChatId, setCurrentChatId] = useState(null); // Tracks which chat is currently displayed\r\nconst [messages, setMessages] = useState([]); // Messages for the current chat\r\n\r\n// Placeholder images\r\nconst infonestLogo = '/logo.png'; // Assuming logo.png is in public/\r\nconst userAvatar = '/avatar.png'; // Assuming avatar.png is in public/\r\n\r\nconst HomePage = () => {\r\n  const navigate = useNavigate();\r\n  const [username, setUsername] = useState('User');\r\n  // const [messages, setMessages] = useState([]); // Removed global messages state\r\n  const [chatInput, setChatInput] = useState('');\r\n  const [sidebarHistory, setSidebarHistory] = useState([]); // This will now store titles of chats\r\n\r\n  // --- New state for managing multiple chats ---\r\n  const [chats, setChats] = useState([]); // Array to hold all chat sessions\r\n  const [currentChatId, setCurrentChatId] = useState(null); // ID of the chat currently being displayed\r\n\r\n  const API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n  // --- useEffect to load chats on mount ---\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const storedUsername = localStorage.getItem('username');\r\n\r\n    if (!token) {\r\n      alert('You are not logged in. Please log in first.');\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    if (storedUsername) {\r\n      setUsername(storedUsername);\r\n    }\r\n\r\n    // Fetch all chat histories or create a default new chat\r\n    loadInitialChats(token);\r\n  }, [navigate]);\r\n\r\n  // --- Function to load initial chats ---\r\n  const loadInitialChats = async (token) => {\r\n    // Ideally, your backend would return a list of chats.\r\n    // For now, let's simulate fetching a default new chat.\r\n    // If you have a /chats endpoint, call it here.\r\n    // For demonstration, we'll create a default new chat.\r\n    handleNewChat(); // Start with a blank new chat\r\n  };\r\n\r\n  // --- Function to get messages for the current chat ---\r\n  const getCurrentChatMessages = () => {\r\n    const currentChat = chats.find(chat => chat.id === currentChatId);\r\n    return currentChat ? currentChat.messages : [];\r\n  };\r\n\r\n  // --- Function to update messages for the current chat ---\r\n  const updateCurrentChatMessages = (newMessages) => {\r\n    setChats(prevChats =>\r\n      prevChats.map(chat =>\r\n        chat.id === currentChatId ? { ...chat, messages: newMessages } : chat\r\n      )\r\n    );\r\n  };\r\n\r\n  // --- Function to fetch chat history (now specific to an ID) ---\r\n  // This would ideally call your backend to get a specific chat's messages\r\n  const fetchChatHistory = async (chatId) => {\r\n    const token = localStorage.getItem('token');\r\n    try {\r\n      // Assuming you have an endpoint like /api/chat/{chatId}\r\n      const response = await axios.get(`${API_BASE_URL}/chat/${chatId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const fetchedMessages = response.data.data.messages; // Assuming backend returns messages\r\n        setMessages(fetchedMessages); // Update the messages for the currently displayed chat\r\n        // Update sidebar history from fetched chat titles\r\n        setSidebarHistory(chats.map(chat => ({ id: chat.id, title: chat.title })));\r\n      } else {\r\n        console.error('Failed to fetch chat history:', response.data.error);\r\n        alert('Could not load chat history.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error fetching chat history:', error);\r\n      if (error.response && error.response.status === 401) {\r\n        alert('Session expired. Please log in again.');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('username');\r\n        navigate('/login');\r\n      } else {\r\n        alert('Network error. Could not connect to server for history.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // --- Function to send message and update current chat ---\r\n  const sendMessage = async (messageText) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token || messageText.trim() === '' || !currentChatId) return;\r\n\r\n    const userMessage = { sender: 'user', text: messageText };\r\n    const currentMessages = getCurrentChatMessages();\r\n    updateCurrentChatMessages([...currentMessages, userMessage]); // Optimistic update\r\n\r\n    setChatInput('');\r\n\r\n    try {\r\n      // Assuming your chat endpoint can work with a chatId\r\n      const response = await axios.post(`${API_BASE_URL}/chat/${currentChatId}`,\r\n        { message: messageText },\r\n        { headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        const botResponse = response.data.botResponse;\r\n        const newMessages = [...currentMessages, userMessage, { sender: 'bot', text: botResponse }];\r\n        updateCurrentChatMessages(newMessages);\r\n\r\n        // Update sidebar with title if it's a new message that creates a title\r\n        // This part is tricky without a backend providing titles.\r\n        // For now, we'll rely on the 'New Chat' title.\r\n      } else {\r\n        const errorData = response.data;\r\n        const errorMsg = { sender: 'bot', text: `Error: ${errorData.error || 'Failed to get bot response.'}` };\r\n        updateCurrentChatMessages([...currentMessages, userMessage, errorMsg]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error sending message:', error);\r\n      let errorMessage = 'Network error. Could not connect to chatbot.';\r\n      if (error.response && error.response.status === 401) {\r\n         errorMessage = 'Session expired. Please log in again.';\r\n         localStorage.removeItem('token');\r\n         localStorage.removeItem('username');\r\n         navigate('/login');\r\n      } else if (error.response && error.response.data && error.response.data.error) {\r\n         errorMessage = `Error: ${error.response.data.error}`;\r\n      }\r\n      updateCurrentChatMessages([...currentMessages, userMessage, { sender: 'bot', text: errorMessage }]);\r\n    }\r\n  };\r\n\r\n  // --- Function to handle starting a new chat ---\r\n  const handleNewChat = () => {\r\n    const newChatId = Date.now(); // Simple unique ID\r\n    const newChat = {\r\n      id: newChatId,\r\n      title: `New Chat ${chats.length + 1}`, // Placeholder title\r\n      messages: [{ sender: 'bot', text: 'Hello! How can I help you today?' }]\r\n    };\r\n\r\n    setChats([...chats, newChat]);\r\n    setCurrentChatId(newChatId);\r\n    setMessages(newChat.messages); // Set current messages\r\n    setSidebarHistory([...sidebarHistory, { id: newChatId, title: newChat.title }]); // Update sidebar history\r\n    setChatInput(''); // Clear input\r\n  };\r\n\r\n  // --- Function to handle clicking a recent chat ---\r\n  const handleRecentChatClick = (chatId) => {\r\n    // Find the chat in the chats array\r\n    const clickedChat = chats.find(chat => chat.id === chatId);\r\n    if (clickedChat) {\r\n      setCurrentChatId(chatId);\r\n      setMessages(clickedChat.messages); // Load messages for that chat\r\n      setChatInput(''); // Clear input\r\n    }\r\n  };\r\n\r\n  // ... rest of the functions (handleChatInputChange, etc.) ...\r\n\r\n  const handleChatInputChange = (e) => {\r\n    setChatInput(e.target.value);\r\n  };\r\n\r\n  const handleSendButtonClick = () => {\r\n    sendMessage(chatInput);\r\n  };\r\n\r\n  const handleInputKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage(chatInput);\r\n    }\r\n  };\r\n\r\n  const handleQuickQuestionClick = (e) => {\r\n    sendMessage(e.target.textContent);\r\n  };\r\n\r\n  // Auto-scroll messages to bottom\r\n  useEffect(() => {\r\n    const messagesContainer = document.querySelector('.chat-messages-container');\r\n    if (messagesContainer) {\r\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n    }\r\n  }, [messages]); // Scroll whenever messages state updates\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <aside className=\"sidebar\">\r\n        <div className=\"logo-section\">\r\n          <img src={infonestLogo} alt=\"InfoNest Logo\" className=\"circle-logo\" />\r\n          <h1>InfoNest</h1>\r\n        </div>\r\n\r\n        <button className=\"new-chat-btn\" onClick={handleNewChat}>\r\n          {/* Pencil SVG for New Chat */}\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12 5V19M19 12H5\" stroke=\"#333\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n          New chat\r\n        </button>\r\n\r\n        <p className=\"recent-title\">Recent</p>\r\n        <ul className=\"recent-list\">\r\n          {/* --- Modified to handle click on recent chats --- */}\r\n          {sidebarHistory.map((chatInfo) => (\r\n            <li\r\n              key={chatInfo.id}\r\n              onClick={() => handleRecentChatClick(chatInfo.id)}\r\n              // Optionally highlight the currently active chat\r\n              style={{\r\n                fontWeight: currentChatId === chatInfo.id ? 'bold' : 'normal',\r\n                backgroundColor: currentChatId === chatInfo.id ? '#e0e0e0' : 'transparent'\r\n              }}\r\n            >\r\n              {chatInfo.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n\r\n        <div className=\"settings-footer\">\r\n          {/* Gear SVG for Settings */}\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M19.4286 4.57143C19.4286 4.57143 15.2143 0.571429 12 0.571429C8.78571 0.571429 4.57143 4.57143 4.57143 4.57143M19.4286 4.57143V10.2857C19.4286 10.7857 19.0714 11.1429 18.5714 11.1429H17.2857M19.4286 4.57143V8.57143M4.57143 4.57143V10.2857C4.57143 10.7857 4.92857 11.1429 5.42857 11.1429H6.71429M4.57143 4.57143V8.57143M12 11.1429V23.4286M12 11.1429C10.2857 11.1429 8.57143 11.1429 7.14286 10.2857C5.71429 9.42857 5.71429 7.71429 5.71429 6.28571C5.71429 4.85714 5.71429 3.14286 7.14286 2.28571C8.57143 1.42857 10.2857 1.42857 12 1.42857C13.7143 1.42857 15.4286 1.42857 16.8571 2.28571C18.2857 3.14286 18.2857 4.85714 18.2857 6.28571C18.2857 7.71429 18.2857 9.42857 16.8571 10.2857\" stroke=\"#555\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n          Settings & Help\r\n        </div>\r\n      </aside>\r\n\r\n      <main className=\"main-content\">\r\n        {/* Chat messages display area */}\r\n        <div className=\"chat-messages-container\">\r\n          <ul>\r\n            {messages.map((msg, index) => (\r\n              <li\r\n                key={index} // Using index here, but unique IDs per message would be better\r\n                className={msg.sender === 'user' ? 'user-message' : 'bot-message'}\r\n              >\r\n                {msg.text}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"ask-container\">\r\n          <input\r\n            type=\"text\"\r\n            id=\"chatInput\"\r\n            placeholder=\"Ask InfoNest anything\"\r\n            value={chatInput}\r\n            onChange={handleChatInputChange}\r\n            onKeyPress={handleInputKeyPress}\r\n          />\r\n          <button id=\"sendChatBtn\" onClick={handleSendButtonClick}>Send</button>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}