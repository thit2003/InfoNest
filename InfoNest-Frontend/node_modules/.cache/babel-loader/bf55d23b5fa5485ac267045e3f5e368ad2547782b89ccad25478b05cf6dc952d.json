{"ast":null,"code":"const linkifyIt = require('linkify-it');\n\n// Basic engine: add .au TLD recognition (second param true = keep defaults + add)\nconst engine = linkifyIt().tlds(['au'], true);\n\n// Map exact URLs to nicer labels\nconst KNOWN_LABELS = {\n  'https://registrar.au.edu/news/all/': 'Registrar News & Updates'\n};\nfunction escapeHtml(s) {\n  return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;');\n}\n\n/**\r\n * Convert plain text to HTML with clickable links.\r\n * Only http/https are recognized (default).\r\n */\nfunction linkifyText(text) {\n  if (!text) return '';\n  let matches;\n  try {\n    matches = engine.match(text);\n  } catch (err) {\n    console.warn('linkify-it match failed, falling back to escaped text:', err);\n    return escapeHtml(text);\n  }\n  if (!matches) return escapeHtml(text);\n  let lastIndex = 0;\n  let out = '';\n  for (const m of matches) {\n    out += escapeHtml(text.slice(lastIndex, m.index));\n    lastIndex = m.lastIndex;\n    const url = m.url;\n    const label = escapeHtml(KNOWN_LABELS[url] || url);\n    out += `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"chat-link\">${label}</a>`;\n  }\n  out += escapeHtml(text.slice(lastIndex));\n  return out;\n}\nmodule.exports = {\n  linkifyText\n};","map":{"version":3,"names":["linkifyIt","require","engine","tlds","KNOWN_LABELS","escapeHtml","s","replace","linkifyText","text","matches","match","err","console","warn","lastIndex","out","m","slice","index","url","label","module","exports"],"sources":["C:/Users/Thit Lwin Win Thant/Downloads/InfoNest/InfoNest-Frontend/src/utils/linkify.js"],"sourcesContent":["const linkifyIt = require('linkify-it');\r\n\r\n// Basic engine: add .au TLD recognition (second param true = keep defaults + add)\r\nconst engine = linkifyIt().tlds(['au'], true);\r\n\r\n// Map exact URLs to nicer labels\r\nconst KNOWN_LABELS = {\r\n  'https://registrar.au.edu/news/all/': 'Registrar News & Updates'\r\n};\r\n\r\nfunction escapeHtml(s) {\r\n  return s\r\n    .replace(/&/g,'&amp;')\r\n    .replace(/</g,'&lt;')\r\n    .replace(/>/g,'&gt;')\r\n    .replace(/\"/g,'&quot;')\r\n    .replace(/'/g,'&#39;');\r\n}\r\n\r\n/**\r\n * Convert plain text to HTML with clickable links.\r\n * Only http/https are recognized (default).\r\n */\r\nfunction linkifyText(text) {\r\n  if (!text) return '';\r\n  let matches;\r\n  try {\r\n    matches = engine.match(text);\r\n  } catch (err) {\r\n    console.warn('linkify-it match failed, falling back to escaped text:', err);\r\n    return escapeHtml(text);\r\n  }\r\n  if (!matches) return escapeHtml(text);\r\n\r\n  let lastIndex = 0;\r\n  let out = '';\r\n  for (const m of matches) {\r\n    out += escapeHtml(text.slice(lastIndex, m.index));\r\n    lastIndex = m.lastIndex;\r\n    const url = m.url;\r\n    const label = escapeHtml(KNOWN_LABELS[url] || url);\r\n    out += `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"chat-link\">${label}</a>`;\r\n  }\r\n  out += escapeHtml(text.slice(lastIndex));\r\n  return out;\r\n}\r\n\r\nmodule.exports = { linkifyText };"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEvC;AACA,MAAMC,MAAM,GAAGF,SAAS,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;;AAE7C;AACA,MAAMC,YAAY,GAAG;EACnB,oCAAoC,EAAE;AACxC,CAAC;AAED,SAASC,UAAUA,CAACC,CAAC,EAAE;EACrB,OAAOA,CAAC,CACLC,OAAO,CAAC,IAAI,EAAC,OAAO,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAC,MAAM,CAAC,CACpBA,OAAO,CAAC,IAAI,EAAC,MAAM,CAAC,CACpBA,OAAO,CAAC,IAAI,EAAC,QAAQ,CAAC,CACtBA,OAAO,CAAC,IAAI,EAAC,OAAO,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,IAAI,EAAE;EACzB,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIC,OAAO;EACX,IAAI;IACFA,OAAO,GAAGR,MAAM,CAACS,KAAK,CAACF,IAAI,CAAC;EAC9B,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZC,OAAO,CAACC,IAAI,CAAC,wDAAwD,EAAEF,GAAG,CAAC;IAC3E,OAAOP,UAAU,CAACI,IAAI,CAAC;EACzB;EACA,IAAI,CAACC,OAAO,EAAE,OAAOL,UAAU,CAACI,IAAI,CAAC;EAErC,IAAIM,SAAS,GAAG,CAAC;EACjB,IAAIC,GAAG,GAAG,EAAE;EACZ,KAAK,MAAMC,CAAC,IAAIP,OAAO,EAAE;IACvBM,GAAG,IAAIX,UAAU,CAACI,IAAI,CAACS,KAAK,CAACH,SAAS,EAAEE,CAAC,CAACE,KAAK,CAAC,CAAC;IACjDJ,SAAS,GAAGE,CAAC,CAACF,SAAS;IACvB,MAAMK,GAAG,GAAGH,CAAC,CAACG,GAAG;IACjB,MAAMC,KAAK,GAAGhB,UAAU,CAACD,YAAY,CAACgB,GAAG,CAAC,IAAIA,GAAG,CAAC;IAClDJ,GAAG,IAAI,YAAYI,GAAG,iEAAiEC,KAAK,MAAM;EACpG;EACAL,GAAG,IAAIX,UAAU,CAACI,IAAI,CAACS,KAAK,CAACH,SAAS,CAAC,CAAC;EACxC,OAAOC,GAAG;AACZ;AAEAM,MAAM,CAACC,OAAO,GAAG;EAAEf;AAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}