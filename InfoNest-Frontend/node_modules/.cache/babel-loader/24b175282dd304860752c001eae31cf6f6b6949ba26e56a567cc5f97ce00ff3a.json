{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thit Lwin Win Thant\\\\Downloads\\\\InfoNest\\\\InfoNest-React-Frontend\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\n// src/pages/HomePage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Link, useNavigate } from 'react-router-dom'; // For redirection\nimport axios from 'axios'; // For making API calls\nimport '../styles/Home.css'; // Import your main CSS file for the layout\n\n// Placeholder images - ensure these are in your public/ folder\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst infonestLogo = '/logo.png';\nconst userAvatar = '/avatar.png';\nconst HomePage = () => {\n  _s();\n  const navigate = useNavigate(); // Hook for navigation\n  const [username, setUsername] = useState('User'); // State for displaying username\n  // State to store all messages in the current chat (user and bot)\n  const [messages, setMessages] = useState([]);\n  const [chatInput, setChatInput] = useState(''); // State for the chat input field\n  // State for the recent conversations list in the sidebar { id: 'convId', snippet: '...' }\n  const [sidebarHistory, setSidebarHistory] = useState([]);\n  // State to track the ID of the currently active conversation\n  const [currentConversationId, setCurrentConversationId] = useState(null);\n  const API_BASE_URL = 'http://localhost:8000/api'; // Base URL for your backend API\n\n  // Ref to prevent unnecessary re-fetching of history if not changed\n  const initialLoadDone = React.useRef(false);\n\n  // --- Authentication Check and Initial Data Fetch ---\n  // --- Authentication Check and Initial Data Fetch ---\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedUsername = localStorage.getItem('username');\n    if (!token) {\n      alert('You are not logged in. Please log in first.');\n      navigate('/login');\n      return; // Exit if no token\n    }\n    if (storedUsername) {\n      setUsername(storedUsername);\n    }\n\n    // Fetch history only if we haven't initiated the load yet AND we have a token\n    if (!initialLoadDone.current && token) {\n      // Added token check here for safety\n      fetchChatHistory(token);\n      initialLoadDone.current = true; // Mark that initial load has been triggered\n    }\n  }, [navigate, token]); // Ensure token is also a dependency if it can change dynamically // Re-run if navigate or token changes\n\n  // --- Function to Fetch List of Conversations for Sidebar ---\n  const fetchConversations = async token => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/conversations`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        } // Include JWT token\n      });\n      if (response.status === 200 && response.data.success) {\n        const conversations = response.data.data;\n        setSidebarHistory(conversations); // Update sidebar history state\n\n        // If there are conversations, load the most recent one by default\n        if (conversations.length > 0 && !currentConversationId) {\n          loadConversation(conversations[0].id, token); // Load the first conversation\n        } else if (conversations.length === 0) {\n          // If no conversations exist yet, show an initial bot greeting\n          setMessages([{\n            sender: 'bot',\n            text: 'Hello! How can I help you today?'\n          }]);\n        }\n      } else {\n        console.error('Failed to fetch conversations:', response.data.error);\n        alert('Could not load conversation history. Please try again.');\n        setMessages([{\n          sender: 'bot',\n          text: 'Hello! How can I help you today?'\n        }]); // Fallback greeting\n      }\n    } catch (error) {\n      console.error('Network error fetching conversations:', error);\n      if (error.response && error.response.status === 401) {\n        // Session expired\n        alert('Session expired. Please log in again.');\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        navigate('/login');\n      } else {\n        alert('Network error. Could not connect to server for conversations.');\n        setMessages([{\n          sender: 'bot',\n          text: 'Hello! How can I help you today?'\n        }]); // Fallback greeting\n      }\n    }\n  };\n\n  // --- Function to Fetch Messages for a Specific Conversation ---\n  const loadConversation = async (conversationId, token) => {\n    if (!conversationId) return; // Do nothing if no ID provided\n\n    setCurrentConversationId(conversationId); // Set the current conversation context\n    console.log(`Loading conversation: ${conversationId}`); // Debugging log\n\n    try {\n      const response = await axios.get(`${API_BASE_URL}/conversation/${conversationId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        } // Include JWT token\n      });\n      if (response.status === 200 && response.data.success) {\n        const fetchedMessages = [];\n        response.data.data.forEach(entry => {\n          // Assuming entry structure is { userMessage: \"...\", botResponse: \"...\", sender: 'user'/'bot' }\n          // You might need to adjust this based on what your backend actually saves.\n          // If userMessage can be null (e.g. for initial bot greeting), handle it.\n          if (entry.userMessage) {\n            fetchedMessages.push({\n              sender: 'user',\n              text: entry.userMessage\n            });\n          }\n          if (entry.botResponse) {\n            fetchedMessages.push({\n              sender: 'bot',\n              text: entry.botResponse\n            });\n          }\n        });\n        setMessages(fetchedMessages); // Update the chat display\n      } else {\n        console.error('Failed to fetch specific conversation:', response.data.error);\n        alert('Could not load this conversation history.');\n        setMessages([{\n          sender: 'bot',\n          text: 'Failed to load conversation.'\n        }]); // Show error in chat\n      }\n    } catch (error) {\n      console.error('Network error fetching conversation:', error);\n      if (error.response && error.response.status === 401) {\n        // Session expired\n        alert('Session expired. Please log in again.');\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        navigate('/login');\n      } else {\n        alert('Network error. Could not connect to server for conversation.');\n      }\n    }\n  };\n\n  // --- Function to Send Message to Chatbot ---\n  const sendMessage = async messageText => {\n    const token = localStorage.getItem('token');\n    // Require token, message, and a current conversationId to send\n    if (!token || messageText.trim() === '' || !currentConversationId) return;\n    const userMessage = {\n      sender: 'user',\n      text: messageText\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]); // Add user message to display\n\n    setChatInput(''); // Clear input field\n\n    try {\n      const response = await axios.post(`${API_BASE_URL}/chat/send`, {\n        message: messageText,\n        conversationId: currentConversationId\n      },\n      // Send message and conversationId\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 200) {\n        const botResponse = response.data.botResponse;\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: botResponse\n        }]);\n\n        // Update sidebar history with the latest user message snippet\n        setSidebarHistory(prevSidebar => {\n          const truncatedMsg = messageText.substring(0, 30) + (messageText.length > 30 ? '...' : '');\n          // Add to the beginning if it's a new message, avoid duplicates\n          // Check if the new snippet is the same as the first one already displayed\n          if (prevSidebar.length === 0 || prevSidebar[0] !== truncatedMsg) {\n            return [truncatedMsg, ...prevSidebar.slice(0, 4)]; // Add to front, keep limit of 5\n          }\n          return prevSidebar; // Return previous state if message is same as first\n        });\n      } else {\n        const errorData = response.data;\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: `Error: ${errorData.error || 'Failed to get bot response.'}`\n        }]);\n      }\n    } catch (error) {\n      console.error('Network error sending message:', error);\n      let errorMessage = 'Network error. Could not connect to chatbot.';\n      if (error.response) {\n        if (error.response.status === 401) {\n          // Session expired\n          errorMessage = 'Session expired. Please log in again.';\n          localStorage.removeItem('token');\n          localStorage.removeItem('username');\n          navigate('/login');\n        } else if (error.response.data && error.response.data.error) {\n          errorMessage = `Error: ${error.response.data.error}`;\n        }\n      }\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: errorMessage\n      }]);\n    }\n  };\n\n  // --- Handle \"New chat\" button ---\n  const handleNewChat = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return; // Should not happen if auth is working\n\n    try {\n      // Call backend to start a new conversation\n      const response = await axios.post(`${API_BASE_URL}/chat/new`, {}, {\n        // POST to /chat/new\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        const newConversationId = response.data.conversationId;\n        setCurrentConversationId(newConversationId); // Set the new conversation ID\n        setMessages([]); // Clear current chat display\n        setSidebarHistory([]); // Clear sidebar history to reflect a fresh start\n        // Add the initial bot greeting for the new chat\n        setMessages([{\n          sender: 'bot',\n          text: response.data.initialMessage || 'Hello! How can I help you today?'\n        }]);\n      } else {\n        alert('Failed to start new chat. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error starting new chat:', error);\n      alert('Network error starting new chat.');\n    }\n  };\n\n  // --- Event Handlers for Input and Buttons ---\n  const handleChatInputChange = e => {\n    setChatInput(e.target.value);\n  };\n  const handleSendButtonClick = () => {\n    sendMessage(chatInput);\n  };\n  const handleInputKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage(chatInput);\n    }\n  };\n\n  // --- Handle Clicking on Recent History Items ---\n  const handleRecentChatItemClick = conversationId => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      // Safety check for token\n      console.error(\"No token available to load conversation.\");\n      navigate('/login');\n      return;\n    }\n    // Prevent reloading the same conversation if already active\n    if (conversationId === currentConversationId) {\n      return;\n    }\n    console.log(\"Clicked on recent chat item with ID:\", conversationId);\n    loadConversation(conversationId, token); // Load this specific conversation\n  };\n\n  // --- Auto-scroll messages to bottom ---\n  // This ensures the latest message is always visible\n  useEffect(() => {\n    const messagesContainer = document.querySelector('.chat-messages-container ul');\n    if (messagesContainer) {\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n  }, [messages]); // Re-run this effect whenever the 'messages' state updates\n\n  // --- Render JSX ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: infonestLogo,\n          alt: \"InfoNest Logo\",\n          className: \"circle-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"InfoNest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-chat-btn\",\n        onClick: handleNewChat,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          style: {\n            marginRight: '8px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 5V19M19 12H5\",\n            stroke: \"#333\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), \"New chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"recent-title\",\n        children: \"Recent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"recent-list\",\n        children: sidebarHistory.map(conv => /*#__PURE__*/_jsxDEV(\"li\", {\n          // Use unique conversation ID as key\n          onClick: () => handleRecentChatItemClick(conv.id) // Load conversation on click\n          ,\n          style: {\n            cursor: 'pointer',\n            padding: '5px 0',\n            fontSize: '14px',\n            lineHeight: '1.5',\n            color: '#333',\n            fontWeight: currentConversationId === conv.id ? 'bold' : 'normal',\n            // Highlight active chat\n            paddingLeft: '5px'\n          },\n          children: conv.snippet\n        }, conv.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          style: {\n            marginRight: '8px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M19.4286 4.57143C19.4286 4.57143 15.2143 0.571429 12 0.571429C8.78571 0.571429 4.57143 4.57143 4.57143 4.57143M19.4286 4.57143V10.2857C19.4286 10.7857 19.0714 11.1429 18.5714 11.1429H17.2857M19.4286 4.57143V8.57143M4.57143 4.57143V10.2857C4.57143 10.7857 4.92857 11.1429 5.42857 11.1429H6.71429M4.57143 4.57143V8.57143M12 11.1429V23.4286M12 11.1429C10.2857 11.1429 8.57143 11.1429 7.14286 10.2857C5.71429 9.42857 5.71429 7.71429 5.71429 6.28571C5.71429 4.85714 5.71429 3.14286 7.14286 2.28571C8.57143 1.42857 10.2857 1.42857 12 1.42857C13.7143 1.42857 15.4286 1.42857 16.8571 2.28571C18.2857 3.14286 18.2857 4.85714 18.2857 6.28571C18.2857 7.71429 18.2857 9.42857 16.8571 10.2857\",\n            stroke: \"#555\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), \"Settings & Help\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: userAvatar,\n          alt: \"User Avatar\",\n          className: \"avatar-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"greeting\",\n        children: [\"Hello, \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"userNameGreeting\",\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 41\n        }, this), \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"messagesList\",\n          style: {\n            listStyle: 'none',\n            padding: '0',\n            margin: '0'\n          },\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            // Use index as key if unique IDs are not available/necessary for messages\n            className: msg.sender === 'user' ? 'user-message' : 'bot-message',\n            style: {\n              // Inline styles for now, move to CSS\n              marginBottom: '10px',\n              padding: '8px 12px',\n              borderRadius: '15px',\n              maxWidth: '70%',\n              wordWrap: 'break-word',\n              backgroundColor: msg.sender === 'user' ? '#dcf8c6' : '#e0e0e0',\n              marginLeft: msg.sender === 'user' ? 'auto' : '0',\n              marginRight: msg.sender === 'user' ? '0' : 'auto',\n              textAlign: msg.sender === 'user' ? 'right' : 'left'\n            },\n            children: msg.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ask-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"chatInput\",\n          placeholder: \"Ask InfoNest anything\",\n          value: chatInput,\n          onChange: handleChatInputChange,\n          onKeyPress: handleInputKeyPress,\n          style: {\n            /* move to CSS */\n            width: 'calc(100% - 120px)',\n            padding: '12px',\n            borderRadius: '25px',\n            border: '1px solid #aaa',\n            textAlign: 'center',\n            marginRight: '10px',\n            boxSizing: 'border-box'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"sendChatBtn\",\n          onClick: handleSendButtonClick,\n          style: {\n            /* move to CSS */\n            padding: '12px 15px',\n            borderRadius: '25px',\n            border: 'none',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            cursor: 'pointer'\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"no2PGJ9dsLQ2TV72C4BG6LNnan4=\", false, function () {\n  return [useNavigate];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","useNavigate","axios","jsxDEV","_jsxDEV","infonestLogo","userAvatar","HomePage","_s","navigate","username","setUsername","messages","setMessages","chatInput","setChatInput","sidebarHistory","setSidebarHistory","currentConversationId","setCurrentConversationId","API_BASE_URL","initialLoadDone","token","localStorage","getItem","storedUsername","alert","current","fetchChatHistory","fetchConversations","response","get","headers","Authorization","status","data","success","conversations","length","loadConversation","id","sender","text","console","error","removeItem","conversationId","log","fetchedMessages","forEach","entry","userMessage","push","botResponse","sendMessage","messageText","trim","prevMessages","post","message","prevSidebar","truncatedMsg","substring","slice","errorData","errorMessage","handleNewChat","newConversationId","initialMessage","handleChatInputChange","e","target","value","handleSendButtonClick","handleInputKeyPress","key","handleRecentChatItemClick","messagesContainer","document","querySelector","scrollTop","scrollHeight","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","viewBox","fill","xmlns","style","marginRight","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","map","conv","cursor","padding","fontSize","lineHeight","color","fontWeight","paddingLeft","snippet","listStyle","margin","msg","index","marginBottom","borderRadius","maxWidth","wordWrap","backgroundColor","marginLeft","textAlign","type","placeholder","onChange","onKeyPress","border","boxSizing","_c","$RefreshReg$"],"sources":["C:/Users/Thit Lwin Win Thant/Downloads/InfoNest/InfoNest-React-Frontend/src/pages/HomePage.js"],"sourcesContent":["// src/pages/HomePage.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom'; // For redirection\r\nimport axios from 'axios'; // For making API calls\r\nimport '../styles/Home.css'; // Import your main CSS file for the layout\r\n\r\n// Placeholder images - ensure these are in your public/ folder\r\nconst infonestLogo = '/logo.png';\r\nconst userAvatar = '/avatar.png';\r\n\r\nconst HomePage = () => {\r\n  const navigate = useNavigate(); // Hook for navigation\r\n  const [username, setUsername] = useState('User'); // State for displaying username\r\n  // State to store all messages in the current chat (user and bot)\r\n  const [messages, setMessages] = useState([]);\r\n  const [chatInput, setChatInput] = useState(''); // State for the chat input field\r\n  // State for the recent conversations list in the sidebar { id: 'convId', snippet: '...' }\r\n  const [sidebarHistory, setSidebarHistory] = useState([]);\r\n  // State to track the ID of the currently active conversation\r\n  const [currentConversationId, setCurrentConversationId] = useState(null);\r\n\r\n  const API_BASE_URL = 'http://localhost:8000/api'; // Base URL for your backend API\r\n\r\n  // Ref to prevent unnecessary re-fetching of history if not changed\r\n  const initialLoadDone = React.useRef(false);\r\n\r\n  // --- Authentication Check and Initial Data Fetch ---\r\n    // --- Authentication Check and Initial Data Fetch ---\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const storedUsername = localStorage.getItem('username');\r\n\r\n    if (!token) {\r\n      alert('You are not logged in. Please log in first.');\r\n      navigate('/login');\r\n      return; // Exit if no token\r\n    }\r\n\r\n    if (storedUsername) {\r\n      setUsername(storedUsername);\r\n    }\r\n\r\n    // Fetch history only if we haven't initiated the load yet AND we have a token\r\n    if (!initialLoadDone.current && token) { // Added token check here for safety\r\n      fetchChatHistory(token);\r\n      initialLoadDone.current = true; // Mark that initial load has been triggered\r\n    }\r\n  }, [navigate, token]); // Ensure token is also a dependency if it can change dynamically // Re-run if navigate or token changes\r\n\r\n  // --- Function to Fetch List of Conversations for Sidebar ---\r\n  const fetchConversations = async (token) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/conversations`, {\r\n        headers: { Authorization: `Bearer ${token}` }, // Include JWT token\r\n      });\r\n\r\n      if (response.status === 200 && response.data.success) {\r\n        const conversations = response.data.data;\r\n        setSidebarHistory(conversations); // Update sidebar history state\r\n\r\n        // If there are conversations, load the most recent one by default\r\n        if (conversations.length > 0 && !currentConversationId) {\r\n          loadConversation(conversations[0].id, token); // Load the first conversation\r\n        } else if (conversations.length === 0) {\r\n          // If no conversations exist yet, show an initial bot greeting\r\n          setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n        }\r\n      } else {\r\n        console.error('Failed to fetch conversations:', response.data.error);\r\n        alert('Could not load conversation history. Please try again.');\r\n        setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]); // Fallback greeting\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error fetching conversations:', error);\r\n      if (error.response && error.response.status === 401) { // Session expired\r\n        alert('Session expired. Please log in again.');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('username');\r\n        navigate('/login');\r\n      } else {\r\n        alert('Network error. Could not connect to server for conversations.');\r\n        setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]); // Fallback greeting\r\n      }\r\n    }\r\n  };\r\n\r\n  // --- Function to Fetch Messages for a Specific Conversation ---\r\n  const loadConversation = async (conversationId, token) => {\r\n    if (!conversationId) return; // Do nothing if no ID provided\r\n\r\n    setCurrentConversationId(conversationId); // Set the current conversation context\r\n    console.log(`Loading conversation: ${conversationId}`); // Debugging log\r\n\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/conversation/${conversationId}`, {\r\n        headers: { Authorization: `Bearer ${token}` }, // Include JWT token\r\n      });\r\n\r\n      if (response.status === 200 && response.data.success) {\r\n        const fetchedMessages = [];\r\n        response.data.data.forEach(entry => {\r\n          // Assuming entry structure is { userMessage: \"...\", botResponse: \"...\", sender: 'user'/'bot' }\r\n          // You might need to adjust this based on what your backend actually saves.\r\n          // If userMessage can be null (e.g. for initial bot greeting), handle it.\r\n          if (entry.userMessage) {\r\n            fetchedMessages.push({ sender: 'user', text: entry.userMessage });\r\n          }\r\n          if (entry.botResponse) {\r\n            fetchedMessages.push({ sender: 'bot', text: entry.botResponse });\r\n          }\r\n        });\r\n        setMessages(fetchedMessages); // Update the chat display\r\n      } else {\r\n        console.error('Failed to fetch specific conversation:', response.data.error);\r\n        alert('Could not load this conversation history.');\r\n        setMessages([{ sender: 'bot', text: 'Failed to load conversation.' }]); // Show error in chat\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error fetching conversation:', error);\r\n      if (error.response && error.response.status === 401) { // Session expired\r\n        alert('Session expired. Please log in again.');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('username');\r\n        navigate('/login');\r\n      } else {\r\n        alert('Network error. Could not connect to server for conversation.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // --- Function to Send Message to Chatbot ---\r\n  const sendMessage = async (messageText) => {\r\n    const token = localStorage.getItem('token');\r\n    // Require token, message, and a current conversationId to send\r\n    if (!token || messageText.trim() === '' || !currentConversationId) return;\r\n\r\n    const userMessage = { sender: 'user', text: messageText };\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]); // Add user message to display\r\n\r\n    setChatInput(''); // Clear input field\r\n\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/chat/send`,\r\n        { message: messageText, conversationId: currentConversationId }, // Send message and conversationId\r\n        { headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        const botResponse = response.data.botResponse;\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: botResponse }]);\r\n\r\n        // Update sidebar history with the latest user message snippet\r\n        setSidebarHistory(prevSidebar => {\r\n          const truncatedMsg = messageText.substring(0, 30) + (messageText.length > 30 ? '...' : '');\r\n          // Add to the beginning if it's a new message, avoid duplicates\r\n          // Check if the new snippet is the same as the first one already displayed\r\n          if (prevSidebar.length === 0 || prevSidebar[0] !== truncatedMsg) {\r\n            return [truncatedMsg, ...prevSidebar.slice(0, 4)]; // Add to front, keep limit of 5\r\n          }\r\n          return prevSidebar; // Return previous state if message is same as first\r\n        });\r\n      } else {\r\n        const errorData = response.data;\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Error: ${errorData.error || 'Failed to get bot response.'}` }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error sending message:', error);\r\n      let errorMessage = 'Network error. Could not connect to chatbot.';\r\n      if (error.response) {\r\n        if (error.response.status === 401) { // Session expired\r\n           errorMessage = 'Session expired. Please log in again.';\r\n           localStorage.removeItem('token');\r\n           localStorage.removeItem('username');\r\n           navigate('/login');\r\n        } else if (error.response.data && error.response.data.error) {\r\n           errorMessage = `Error: ${error.response.data.error}`;\r\n        }\r\n      }\r\n      setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: errorMessage }]);\r\n    }\r\n  };\r\n\r\n  // --- Handle \"New chat\" button ---\r\n  const handleNewChat = async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return; // Should not happen if auth is working\r\n\r\n    try {\r\n      // Call backend to start a new conversation\r\n      const response = await axios.post(`${API_BASE_URL}/chat/new`, {}, { // POST to /chat/new\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n\r\n      if (response.status === 201) {\r\n        const newConversationId = response.data.conversationId;\r\n        setCurrentConversationId(newConversationId); // Set the new conversation ID\r\n        setMessages([]); // Clear current chat display\r\n        setSidebarHistory([]); // Clear sidebar history to reflect a fresh start\r\n        // Add the initial bot greeting for the new chat\r\n        setMessages([{ sender: 'bot', text: response.data.initialMessage || 'Hello! How can I help you today?' }]);\r\n      } else {\r\n        alert('Failed to start new chat. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error starting new chat:', error);\r\n      alert('Network error starting new chat.');\r\n    }\r\n  };\r\n\r\n  // --- Event Handlers for Input and Buttons ---\r\n  const handleChatInputChange = (e) => {\r\n    setChatInput(e.target.value);\r\n  };\r\n\r\n  const handleSendButtonClick = () => {\r\n    sendMessage(chatInput);\r\n  };\r\n\r\n  const handleInputKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage(chatInput);\r\n    }\r\n  };\r\n\r\n  // --- Handle Clicking on Recent History Items ---\r\n  const handleRecentChatItemClick = (conversationId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) { // Safety check for token\r\n      console.error(\"No token available to load conversation.\");\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    // Prevent reloading the same conversation if already active\r\n    if (conversationId === currentConversationId) {\r\n      return;\r\n    }\r\n    console.log(\"Clicked on recent chat item with ID:\", conversationId);\r\n    loadConversation(conversationId, token); // Load this specific conversation\r\n  };\r\n\r\n  // --- Auto-scroll messages to bottom ---\r\n  // This ensures the latest message is always visible\r\n  useEffect(() => {\r\n    const messagesContainer = document.querySelector('.chat-messages-container ul');\r\n    if (messagesContainer) {\r\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n    }\r\n  }, [messages]); // Re-run this effect whenever the 'messages' state updates\r\n\r\n  // --- Render JSX ---\r\n  return (\r\n    <div className=\"container\">\r\n      <aside className=\"sidebar\">\r\n        <div className=\"logo-section\">\r\n          <img src={infonestLogo} alt=\"InfoNest Logo\" className=\"circle-logo\" />\r\n          <h1>InfoNest</h1>\r\n        </div>\r\n\r\n        {/* New Chat Button */}\r\n        <button className=\"new-chat-btn\" onClick={handleNewChat}>\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px' }}>\r\n            <path d=\"M12 5V19M19 12H5\" stroke=\"#333\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n          New chat\r\n        </button>\r\n\r\n        <p className=\"recent-title\">Recent</p>\r\n        <ul className=\"recent-list\">\r\n          {/* Render recent conversations */}\r\n          {sidebarHistory.map((conv) => (\r\n            <li\r\n              key={conv.id} // Use unique conversation ID as key\r\n              onClick={() => handleRecentChatItemClick(conv.id)} // Load conversation on click\r\n              style={{\r\n                cursor: 'pointer', padding: '5px 0', fontSize: '14px', lineHeight: '1.5', color: '#333',\r\n                fontWeight: currentConversationId === conv.id ? 'bold' : 'normal', // Highlight active chat\r\n                paddingLeft: '5px'\r\n              }}\r\n            >\r\n              {conv.snippet}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n\r\n        <div className=\"settings-footer\">\r\n          {/* SVG for Settings Icon */}\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginRight: '8px' }}>\r\n            <path d=\"M19.4286 4.57143C19.4286 4.57143 15.2143 0.571429 12 0.571429C8.78571 0.571429 4.57143 4.57143 4.57143 4.57143M19.4286 4.57143V10.2857C19.4286 10.7857 19.0714 11.1429 18.5714 11.1429H17.2857M19.4286 4.57143V8.57143M4.57143 4.57143V10.2857C4.57143 10.7857 4.92857 11.1429 5.42857 11.1429H6.71429M4.57143 4.57143V8.57143M12 11.1429V23.4286M12 11.1429C10.2857 11.1429 8.57143 11.1429 7.14286 10.2857C5.71429 9.42857 5.71429 7.71429 5.71429 6.28571C5.71429 4.85714 5.71429 3.14286 7.14286 2.28571C8.57143 1.42857 10.2857 1.42857 12 1.42857C13.7143 1.42857 15.4286 1.42857 16.8571 2.28571C18.2857 3.14286 18.2857 4.85714 18.2857 6.28571C18.2857 7.71429 18.2857 9.42857 16.8571 10.2857\" stroke=\"#555\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n          Settings & Help\r\n        </div>\r\n      </aside>\r\n\r\n      <main className=\"main-content\">\r\n        {/* Greeting */}\r\n        <div className=\"avatar-container\">\r\n          <img src={userAvatar} alt=\"User Avatar\" className=\"avatar-img\" />\r\n        </div>\r\n        <h1 className=\"greeting\">Hello, <span id=\"userNameGreeting\">{username}</span>!</h1>\r\n\r\n        {/* Chat messages display area */}\r\n        <div className=\"chat-messages-container\">\r\n          <ul id=\"messagesList\" style={{ listStyle: 'none', padding: '0', margin: '0' }}>\r\n            {messages.map((msg, index) => (\r\n              <li\r\n                key={index} // Use index as key if unique IDs are not available/necessary for messages\r\n                className={msg.sender === 'user' ? 'user-message' : 'bot-message'}\r\n                style={{ // Inline styles for now, move to CSS\r\n                  marginBottom: '10px', padding: '8px 12px', borderRadius: '15px',\r\n                  maxWidth: '70%', wordWrap: 'break-word',\r\n                  backgroundColor: msg.sender === 'user' ? '#dcf8c6' : '#e0e0e0',\r\n                  marginLeft: msg.sender === 'user' ? 'auto' : '0',\r\n                  marginRight: msg.sender === 'user' ? '0' : 'auto',\r\n                  textAlign: msg.sender === 'user' ? 'right' : 'left',\r\n                }}\r\n              >\r\n                {msg.text}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n        {/* Input area */}\r\n        <div className=\"ask-container\">\r\n          <input\r\n            type=\"text\"\r\n            id=\"chatInput\"\r\n            placeholder=\"Ask InfoNest anything\"\r\n            value={chatInput}\r\n            onChange={handleChatInputChange}\r\n            onKeyPress={handleInputKeyPress}\r\n            style={{ /* move to CSS */\r\n              width: 'calc(100% - 120px)', padding: '12px', borderRadius: '25px', border: '1px solid #aaa',\r\n              textAlign: 'center', marginRight: '10px', boxSizing: 'border-box'\r\n            }}\r\n          />\r\n          <button id=\"sendChatBtn\" onClick={handleSendButtonClick} style={{ /* move to CSS */\r\n              padding: '12px 15px', borderRadius: '25px', border: 'none',\r\n              backgroundColor: '#4CAF50', color: 'white', cursor: 'pointer'\r\n          }}>\r\n            Send\r\n          </button>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}