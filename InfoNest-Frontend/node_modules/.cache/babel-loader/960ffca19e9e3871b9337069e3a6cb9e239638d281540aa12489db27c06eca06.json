{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thit Lwin Win Thant\\\\Downloads\\\\InfoNest\\\\InfoNest-Frontend\\\\src\\\\components\\\\GoogleSignIn.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { BACKEND_API_BASE } from '../config';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GoogleSignIn = ({\n  onSuccess,\n  onError,\n  buttonText = 'Continue with Google'\n}) => {\n  _s();\n  const scriptLoadedRef = useRef(false);\n  const [loading, setLoading] = useState(false);\n  const loadScript = () => {\n    return new Promise((resolve, reject) => {\n      if (document.getElementById('google-identity-script')) return resolve();\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.id = 'google-identity-script';\n      script.async = true;\n      script.defer = true;\n      script.onload = resolve;\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  };\n  useEffect(() => {\n    let cancelled = false;\n    async function init() {\n      try {\n        await loadScript();\n        if (cancelled) return;\n        if (!window.google || !window.google.accounts || !process.env.REACT_APP_GOOGLE_CLIENT_ID) {\n          console.warn('Google script or client ID not available');\n          return;\n        }\n        window.google.accounts.id.initialize({\n          client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n          callback: async response => {\n            // response.credential is the ID token\n            if (!response.credential) {\n              onError && onError('No credential received from Google.');\n              return;\n            }\n            try {\n              setLoading(true);\n              const r = await axios.post(`${BACKEND_API_BASE}/auth/google`, {\n                idToken: response.credential\n              });\n              if (r.data && r.data.success) {\n                onSuccess && onSuccess(r.data);\n              } else {\n                onError && onError(r.data.error || 'Google auth failed.');\n              }\n            } catch (e) {\n              console.error('Google auth network error:', e);\n              onError && onError('Network error during Google auth.');\n            } finally {\n              setLoading(false);\n            }\n          },\n          // Additional config:\n          ux_mode: 'popup',\n          // or 'redirect'\n          auto_select: false,\n          cancel_on_tap_outside: true\n        });\n\n        // OPTIONAL: Instead of a custom button, you can let Google render:\n        // const div = document.getElementById('google-btn-container');\n        // window.google.accounts.id.renderButton(div, { theme: 'outline', size: 'large' });\n      } catch (err) {\n        console.error('Failed to load Google script', err);\n        onError && onError('Failed to load Google script.');\n      }\n    }\n    if (!scriptLoadedRef.current) {\n      scriptLoadedRef.current = true;\n      init();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [onSuccess, onError]);\n  const handleCustomClick = () => {\n    if (!window.google || !window.google.accounts || !process.env.REACT_APP_GOOGLE_CLIENT_ID) {\n      onError && onError('Google Identity not initialized yet.');\n      return;\n    }\n    // Prompt triggers One Tap/popup. For a pure button flow, we can do prompt()\n    // or simply rely on the automatic callback if you used renderButton. We'll call prompt so user picks account.\n    window.google.accounts.id.prompt(notification => {\n      // Optional: handle dismissal or skipped statuses\n      if (notification.isNotDisplayed()) {\n        console.warn('Google prompt not displayed:', notification.getNotDisplayedReason());\n      }\n      if (notification.isSkippedMoment()) {\n        console.warn('Google prompt skipped:', notification.getSkippedReason());\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '15px',\n      textAlign: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleCustomClick,\n      disabled: loading,\n      style: {\n        width: '100%',\n        padding: '10px',\n        backgroundColor: '#ffffff',\n        border: '1px solid #4285F4',\n        color: '#4285F4',\n        fontWeight: 'bold',\n        borderRadius: '4px',\n        cursor: 'pointer',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        gap: '8px'\n      },\n      children: loading ? 'Authenticating...' : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Google\",\n          src: \"https://developers.google.com/identity/images/g-logo.png\",\n          style: {\n            width: 18,\n            height: 18\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), buttonText]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleSignIn, \"5tiY/UJzaE5BcbeRwe09SIeLswY=\");\n_c = GoogleSignIn;\nexport default GoogleSignIn;\nvar _c;\n$RefreshReg$(_c, \"GoogleSignIn\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","BACKEND_API_BASE","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleSignIn","onSuccess","onError","buttonText","_s","scriptLoadedRef","loading","setLoading","loadScript","Promise","resolve","reject","document","getElementById","script","createElement","src","id","async","defer","onload","onerror","head","appendChild","cancelled","init","window","google","accounts","process","env","REACT_APP_GOOGLE_CLIENT_ID","console","warn","initialize","client_id","callback","response","credential","r","post","idToken","data","success","error","e","ux_mode","auto_select","cancel_on_tap_outside","err","current","handleCustomClick","prompt","notification","isNotDisplayed","getNotDisplayedReason","isSkippedMoment","getSkippedReason","style","marginTop","textAlign","children","type","onClick","disabled","width","padding","backgroundColor","border","color","fontWeight","borderRadius","cursor","display","alignItems","justifyContent","gap","alt","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Thit Lwin Win Thant/Downloads/InfoNest/InfoNest-Frontend/src/components/GoogleSignIn.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { BACKEND_API_BASE } from '../config';\r\n\r\nconst GoogleSignIn = ({ onSuccess, onError, buttonText = 'Continue with Google' }) => {\r\n  const scriptLoadedRef = useRef(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const loadScript = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (document.getElementById('google-identity-script')) return resolve();\r\n      const script = document.createElement('script');\r\n      script.src = 'https://accounts.google.com/gsi/client';\r\n      script.id = 'google-identity-script';\r\n      script.async = true;\r\n      script.defer = true;\r\n      script.onload = resolve;\r\n      script.onerror = reject;\r\n      document.head.appendChild(script);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n\r\n    async function init() {\r\n      try {\r\n        await loadScript();\r\n        if (cancelled) return;\r\n\r\n        if (!window.google || !window.google.accounts || !process.env.REACT_APP_GOOGLE_CLIENT_ID) {\r\n          console.warn('Google script or client ID not available');\r\n          return;\r\n        }\r\n\r\n        window.google.accounts.id.initialize({\r\n          client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\r\n            callback: async (response) => {\r\n            // response.credential is the ID token\r\n            if (!response.credential) {\r\n              onError && onError('No credential received from Google.');\r\n              return;\r\n            }\r\n            try {\r\n              setLoading(true);\r\n              const r = await axios.post(`${BACKEND_API_BASE}/auth/google`, {\r\n                idToken: response.credential\r\n              });\r\n              if (r.data && r.data.success) {\r\n                onSuccess && onSuccess(r.data);\r\n              } else {\r\n                onError && onError(r.data.error || 'Google auth failed.');\r\n              }\r\n            } catch (e) {\r\n              console.error('Google auth network error:', e);\r\n              onError && onError('Network error during Google auth.');\r\n            } finally {\r\n              setLoading(false);\r\n            }\r\n          },\r\n          // Additional config:\r\n          ux_mode: 'popup', // or 'redirect'\r\n          auto_select: false,\r\n          cancel_on_tap_outside: true\r\n        });\r\n\r\n        // OPTIONAL: Instead of a custom button, you can let Google render:\r\n        // const div = document.getElementById('google-btn-container');\r\n        // window.google.accounts.id.renderButton(div, { theme: 'outline', size: 'large' });\r\n\r\n      } catch (err) {\r\n        console.error('Failed to load Google script', err);\r\n        onError && onError('Failed to load Google script.');\r\n      }\r\n    }\r\n\r\n    if (!scriptLoadedRef.current) {\r\n      scriptLoadedRef.current = true;\r\n      init();\r\n    }\r\n\r\n    return () => { cancelled = true; };\r\n  }, [onSuccess, onError]);\r\n\r\n  const handleCustomClick = () => {\r\n    if (!window.google || !window.google.accounts || !process.env.REACT_APP_GOOGLE_CLIENT_ID) {\r\n      onError && onError('Google Identity not initialized yet.');\r\n      return;\r\n    }\r\n    // Prompt triggers One Tap/popup. For a pure button flow, we can do prompt()\r\n    // or simply rely on the automatic callback if you used renderButton. We'll call prompt so user picks account.\r\n    window.google.accounts.id.prompt((notification) => {\r\n      // Optional: handle dismissal or skipped statuses\r\n      if (notification.isNotDisplayed()) {\r\n        console.warn('Google prompt not displayed:', notification.getNotDisplayedReason());\r\n      }\r\n      if (notification.isSkippedMoment()) {\r\n        console.warn('Google prompt skipped:', notification.getSkippedReason());\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: '15px', textAlign: 'center' }}>\r\n      {/* If you prefer official styled automatic button:\r\n          <div id=\"google-btn-container\" style={{ display: 'flex', justifyContent: 'center' }}></div>\r\n          Remove the custom button below.\r\n       */}\r\n      <button\r\n        type=\"button\"\r\n        onClick={handleCustomClick}\r\n        disabled={loading}\r\n        style={{\r\n          width: '100%',\r\n          padding: '10px',\r\n          backgroundColor: '#ffffff',\r\n          border: '1px solid #4285F4',\r\n          color: '#4285F4',\r\n          fontWeight: 'bold',\r\n          borderRadius: '4px',\r\n          cursor: 'pointer',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          gap: '8px'\r\n        }}\r\n      >\r\n        {loading ? 'Authenticating...' : (\r\n          <>\r\n            <img\r\n              alt=\"Google\"\r\n              src=\"https://developers.google.com/identity/images/g-logo.png\"\r\n              style={{ width: 18, height: 18 }}\r\n            />\r\n            {buttonText}\r\n          </>\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleSignIn;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}