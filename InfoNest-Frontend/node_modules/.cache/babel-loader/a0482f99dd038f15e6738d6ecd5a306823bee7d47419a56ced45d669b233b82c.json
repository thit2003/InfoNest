{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thit Lwin Win Thant\\\\Downloads\\\\InfoNest\\\\InfoNest-React-Frontend\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\n// src/pages/HomePage.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // For redirection\nimport axios from 'axios'; // For making API calls\nimport '../styles/Home.css'; // Import the CSS file\n\n// Placeholder images\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst infonestLogo = '/logo.png'; // Assuming logo.png is in public/\nconst userAvatar = '/avatar.png'; // Assuming avatar.png is in public/\n\nconst HomePage = () => {\n  _s();\n  const navigate = useNavigate(); // Hook for navigation\n  const [username, setUsername] = useState('User');\n  const [messages, setMessages] = useState([]); // Stores { sender: 'user'/'bot', text: '...' }\n  const [chatInput, setChatInput] = useState('');\n  const [sidebarHistory, setSidebarHistory] = useState([]); // For the Recent list in sidebar\n\n  const API_BASE_URL = 'http://localhost:8000/api';\n  const initialLoadCompleted = React.useRef(false); // Renamed for clarity\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedUsername = localStorage.getItem('username');\n    if (!token) {\n      alert('You are not logged in. Please log in first.');\n      navigate('/login');\n      return;\n    }\n    if (storedUsername) {\n      setUsername(storedUsername);\n    }\n\n    // Fetch conversations only if initial load hasn't happened yet\n    // and we have a token.\n    if (!initialLoadDone.current) {\n      fetchConversations(token); // Fetch conversations for sidebar and load initial chat\n      initialLoadDone.current = true; // Mark that initial load has been triggered\n    }\n  }, [navigate, token]); // Depend on navigate and token to re-run if auth state changes\n\n  // --- fetchConversations function (as provided before) ---\n  const fetchConversations = async token => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/conversations`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 200 && response.data.success) {\n        const conversations = response.data.data;\n        setSidebarHistory(conversations);\n\n        // If there are conversations, load the most recent one by default\n        if (conversations.length > 0 && !currentConversationId) {\n          // Only load if no conversation is currently active\n          loadConversation(conversations[0].id, token);\n        } else if (conversations.length === 0) {\n          // If no conversations exist yet, show an initial bot greeting\n          setMessages([{\n            sender: 'bot',\n            text: 'Hello! How can I help you today?'\n          }]);\n        }\n      } else {\n        console.error('Failed to fetch conversations:', response.data.error);\n        alert('Could not load conversation history. Please try again.');\n        setMessages([{\n          sender: 'bot',\n          text: 'Hello! How can I help you today?'\n        }]);\n      }\n    } catch (error) {\n      console.error('Network error fetching conversations:', error);\n      if (error.response && error.response.status === 401) {\n        // Session expired\n        alert('Session expired. Please log in again.');\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        navigate('/login');\n      } else {\n        alert('Network error. Could not connect to server for conversations.');\n        setMessages([{\n          sender: 'bot',\n          text: 'Hello! How can I help you today?'\n        }]);\n      }\n    }\n  };\n  const sendMessage = async messageText => {\n    const token = localStorage.getItem('token');\n    if (!token || messageText.trim() === '') return;\n    const userMessage = {\n      sender: 'user',\n      text: messageText\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setChatInput('');\n    try {\n      const response = await axios.post(`${API_BASE_URL}/chat`, {\n        message: messageText\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 200) {\n        const botResponse = response.data.botResponse;\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: botResponse\n        }]);\n        setSidebarHistory(prevSidebar => [...prevSidebar, messageText.substring(0, 25) + '...']);\n      } else {\n        const errorData = response.data;\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: `Error: ${errorData.error || 'Failed to get bot response.'}`\n        }]);\n      }\n    } catch (error) {\n      console.error('Network error sending message:', error);\n      let errorMessage = 'Network error. Could not connect to chatbot.';\n      if (error.response && error.response.status === 401) {\n        errorMessage = 'Session expired. Please log in again.';\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        navigate('/login');\n      } else if (error.response && error.response.data && error.response.data.error) {\n        errorMessage = `Error: ${error.response.data.error}`;\n      }\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: errorMessage\n      }]);\n    }\n  };\n\n  // --- Function to handle starting a new chat ---\n  const handleNewChat = () => {\n    setMessages([]); // Clear all current messages\n    // You might also want to clear the current chat context or history in your backend\n    // For now, we'll just clear the frontend messages and start with a bot greeting.\n    setMessages([{\n      sender: 'bot',\n      text: 'Hello! How can I help you today?'\n    }]);\n    // Optionally, clear the recent history if you want a completely fresh sidebar\n    // setSidebarHistory([]);\n  };\n  const handleChatInputChange = e => {\n    setChatInput(e.target.value);\n  };\n  const handleSendButtonClick = () => {\n    sendMessage(chatInput);\n  };\n  const handleInputKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage(chatInput);\n    }\n  };\n  const handleQuickQuestionClick = e => {\n    sendMessage(e.target.textContent);\n  };\n  useEffect(() => {\n    const messagesContainer = document.querySelector('.chat-messages-container');\n    if (messagesContainer) {\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: infonestLogo,\n          alt: \"InfoNest Logo\",\n          className: \"circle-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"InfoNest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-chat-btn\",\n        onClick: handleNewChat,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 5V19M19 12H5\",\n            stroke: \"#333\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), \"New chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"recent-title\",\n        children: \"Recent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"recent-list\",\n        children: sidebarHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: entry\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M19.4286 4.57143C19.4286 4.57143 15.2143 0.571429 12 0.571429C8.78571 0.571429 4.57143 4.57143 4.57143 4.57143M19.4286 4.57143V10.2857C19.4286 10.7857 19.0714 11.1429 18.5714 11.1429H17.2857M19.4286 4.57143V8.57143M4.57143 4.57143V10.2857C4.57143 10.7857 4.92857 11.1429 5.42857 11.1429H6.71429M4.57143 4.57143V8.57143M12 11.1429V23.4286M12 11.1429C10.2857 11.1429 8.57143 11.1429 7.14286 10.2857C5.71429 9.42857 5.71429 7.71429 5.71429 6.28571C5.71429 4.85714 5.71429 3.14286 7.14286 2.28571C8.57143 1.42857 10.2857 1.42857 12 1.42857C13.7143 1.42857 15.4286 1.42857 16.8571 2.28571C18.2857 3.14286 18.2857 4.85714 18.2857 6.28571C18.2857 7.71429 18.2857 9.42857 16.8571 10.2857\",\n            stroke: \"#555\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), \"Settings & Help\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: msg.sender === 'user' ? 'user-message' : 'bot-message',\n            children: msg.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ask-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"chatInput\",\n          placeholder: \"Ask InfoNest anything\",\n          value: chatInput,\n          onChange: handleChatInputChange,\n          onKeyPress: handleInputKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"sendChatBtn\",\n          onClick: handleSendButtonClick,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"VSMKfPsqo+4+Q3L/oYJZuuexWd8=\", false, function () {\n  return [useNavigate];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","infonestLogo","userAvatar","HomePage","_s","navigate","username","setUsername","messages","setMessages","chatInput","setChatInput","sidebarHistory","setSidebarHistory","API_BASE_URL","initialLoadCompleted","useRef","token","localStorage","getItem","storedUsername","alert","initialLoadDone","current","fetchConversations","response","get","headers","Authorization","status","data","success","conversations","length","currentConversationId","loadConversation","id","sender","text","console","error","removeItem","sendMessage","messageText","trim","userMessage","prevMessages","post","message","botResponse","prevSidebar","substring","errorData","errorMessage","handleNewChat","handleChatInputChange","e","target","value","handleSendButtonClick","handleInputKeyPress","key","handleQuickQuestionClick","textContent","messagesContainer","document","querySelector","scrollTop","scrollHeight","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","map","entry","index","msg","type","placeholder","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/Thit Lwin Win Thant/Downloads/InfoNest/InfoNest-React-Frontend/src/pages/HomePage.js"],"sourcesContent":["// src/pages/HomePage.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // For redirection\r\nimport axios from 'axios'; // For making API calls\r\nimport '../styles/Home.css'; // Import the CSS file\r\n\r\n// Placeholder images\r\nconst infonestLogo = '/logo.png'; // Assuming logo.png is in public/\r\nconst userAvatar = '/avatar.png'; // Assuming avatar.png is in public/\r\n\r\nconst HomePage = () => {\r\n  const navigate = useNavigate(); // Hook for navigation\r\n  const [username, setUsername] = useState('User');\r\n  const [messages, setMessages] = useState([]); // Stores { sender: 'user'/'bot', text: '...' }\r\n  const [chatInput, setChatInput] = useState('');\r\n  const [sidebarHistory, setSidebarHistory] = useState([]); // For the Recent list in sidebar\r\n\r\n  const API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n  const initialLoadCompleted = React.useRef(false); // Renamed for clarity\r\n\r\nuseEffect(() => {\r\n  const token = localStorage.getItem('token');\r\n  const storedUsername = localStorage.getItem('username');\r\n\r\n  if (!token) {\r\n    alert('You are not logged in. Please log in first.');\r\n    navigate('/login');\r\n    return;\r\n  }\r\n\r\n  if (storedUsername) {\r\n    setUsername(storedUsername);\r\n  }\r\n\r\n  // Fetch conversations only if initial load hasn't happened yet\r\n  // and we have a token.\r\n  if (!initialLoadDone.current) {\r\n      fetchConversations(token); // Fetch conversations for sidebar and load initial chat\r\n      initialLoadDone.current = true; // Mark that initial load has been triggered\r\n  }\r\n}, [navigate, token]); // Depend on navigate and token to re-run if auth state changes\r\n\r\n// --- fetchConversations function (as provided before) ---\r\nconst fetchConversations = async (token) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/conversations`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n\r\n        if (response.status === 200 && response.data.success) {\r\n            const conversations = response.data.data;\r\n            setSidebarHistory(conversations);\r\n\r\n            // If there are conversations, load the most recent one by default\r\n            if (conversations.length > 0 && !currentConversationId) { // Only load if no conversation is currently active\r\n                loadConversation(conversations[0].id, token);\r\n            } else if (conversations.length === 0) {\r\n                // If no conversations exist yet, show an initial bot greeting\r\n                setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n            }\r\n        } else {\r\n            console.error('Failed to fetch conversations:', response.data.error);\r\n            alert('Could not load conversation history. Please try again.');\r\n            setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n        }\r\n    } catch (error) {\r\n        console.error('Network error fetching conversations:', error);\r\n        if (error.response && error.response.status === 401) { // Session expired\r\n            alert('Session expired. Please log in again.');\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('username');\r\n            navigate('/login');\r\n        } else {\r\n            alert('Network error. Could not connect to server for conversations.');\r\n            setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n        }\r\n    }\r\n};\r\n\r\n  const sendMessage = async (messageText) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token || messageText.trim() === '') return;\r\n\r\n    const userMessage = { sender: 'user', text: messageText };\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n    setChatInput('');\r\n\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/chat`,\r\n        { message: messageText },\r\n        { headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        const botResponse = response.data.botResponse;\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: botResponse }]);\r\n        setSidebarHistory(prevSidebar => [...prevSidebar, messageText.substring(0, 25) + '...']);\r\n      } else {\r\n        const errorData = response.data;\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Error: ${errorData.error || 'Failed to get bot response.'}` }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Network error sending message:', error);\r\n      let errorMessage = 'Network error. Could not connect to chatbot.';\r\n      if (error.response && error.response.status === 401) {\r\n         errorMessage = 'Session expired. Please log in again.';\r\n         localStorage.removeItem('token');\r\n         localStorage.removeItem('username');\r\n         navigate('/login');\r\n      } else if (error.response && error.response.data && error.response.data.error) {\r\n         errorMessage = `Error: ${error.response.data.error}`;\r\n      }\r\n      setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: errorMessage }]);\r\n    }\r\n  };\r\n\r\n  // --- Function to handle starting a new chat ---\r\n  const handleNewChat = () => {\r\n    setMessages([]); // Clear all current messages\r\n    // You might also want to clear the current chat context or history in your backend\r\n    // For now, we'll just clear the frontend messages and start with a bot greeting.\r\n    setMessages([{ sender: 'bot', text: 'Hello! How can I help you today?' }]);\r\n    // Optionally, clear the recent history if you want a completely fresh sidebar\r\n    // setSidebarHistory([]);\r\n  };\r\n\r\n  const handleChatInputChange = (e) => {\r\n    setChatInput(e.target.value);\r\n  };\r\n\r\n  const handleSendButtonClick = () => {\r\n    sendMessage(chatInput);\r\n  };\r\n\r\n  const handleInputKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage(chatInput);\r\n    }\r\n  };\r\n\r\n  const handleQuickQuestionClick = (e) => {\r\n    sendMessage(e.target.textContent);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const messagesContainer = document.querySelector('.chat-messages-container');\r\n    if (messagesContainer) {\r\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <aside className=\"sidebar\">\r\n        <div className=\"logo-section\">\r\n          <img src={infonestLogo} alt=\"InfoNest Logo\" className=\"circle-logo\" />\r\n          <h1>InfoNest</h1>\r\n        </div>\r\n\r\n        {/* --- Modified Button to call handleNewChat --- */}\r\n        <button className=\"new-chat-btn\" onClick={handleNewChat}>\r\n          {/* Pencil SVG for New Chat */}\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12 5V19M19 12H5\" stroke=\"#333\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n          New chat\r\n        </button>\r\n\r\n        <p className=\"recent-title\">Recent</p>\r\n        <ul className=\"recent-list\">\r\n          {sidebarHistory.map((entry, index) => (\r\n            <li key={index}>{entry}</li>\r\n          ))}\r\n        </ul>\r\n\r\n        <div className=\"settings-footer\">\r\n          {/* Gear SVG for Settings */}\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M19.4286 4.57143C19.4286 4.57143 15.2143 0.571429 12 0.571429C8.78571 0.571429 4.57143 4.57143 4.57143 4.57143M19.4286 4.57143V10.2857C19.4286 10.7857 19.0714 11.1429 18.5714 11.1429H17.2857M19.4286 4.57143V8.57143M4.57143 4.57143V10.2857C4.57143 10.7857 4.92857 11.1429 5.42857 11.1429H6.71429M4.57143 4.57143V8.57143M12 11.1429V23.4286M12 11.1429C10.2857 11.1429 8.57143 11.1429 7.14286 10.2857C5.71429 9.42857 5.71429 7.71429 5.71429 6.28571C5.71429 4.85714 5.71429 3.14286 7.14286 2.28571C8.57143 1.42857 10.2857 1.42857 12 1.42857C13.7143 1.42857 15.4286 1.42857 16.8571 2.28571C18.2857 3.14286 18.2857 4.85714 18.2857 6.28571C18.2857 7.71429 18.2857 9.42857 16.8571 10.2857\" stroke=\"#555\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n          Settings & Help\r\n        </div>\r\n      </aside>\r\n\r\n      <main className=\"main-content\">\r\n        {/* Greeting and Avatar removed */}\r\n\r\n        {/* Chat messages display area */}\r\n        <div className=\"chat-messages-container\">\r\n          <ul>\r\n            {messages.map((msg, index) => (\r\n              <li\r\n                key={index}\r\n                className={msg.sender === 'user' ? 'user-message' : 'bot-message'}\r\n              >\r\n                {msg.text}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n        {/* Removed the buttons-row section entirely */}\r\n\r\n        <div className=\"ask-container\">\r\n          <input\r\n            type=\"text\"\r\n            id=\"chatInput\"\r\n            placeholder=\"Ask InfoNest anything\"\r\n            value={chatInput}\r\n            onChange={handleChatInputChange}\r\n            onKeyPress={handleInputKeyPress}\r\n          />\r\n          <button id=\"sendChatBtn\" onClick={handleSendButtonClick}>Send</button>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}